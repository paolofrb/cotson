TRACE_OUT='/tmp/mem_tracer.txt.gz'

options = {
	max_samples="5", -- after 5 simulation samples, the simulation ends
	sampler={ type="simple", quantum="100k", },
		-- simple means timing simulation is always on
	heartbeat={ type="file_last", logfile="mem_tracer.log" }, 
		-- one result file in mem_tracer.log
}


-- change this to point to your bsd and hdd
-- you can use absolute paths here or else
-- placed the bsd and hdd in the data directory
-- of this distribution
simnow.commands=function()
	use_bsd('1p.bsd')
	use_hdd('karmic64.img')
	set_journal()
	-- this next string is input by simulating
	-- keystrokes. Our machine is in text mode
	-- expecting a command and this next command
	-- will execute a simple command
	-- You do not need to issue the \n
	send_keyboard('gcc -O3 -c -w /home/user/test.i')
end

function build()
	i=0
	while i < disks() do
		disk=get_disk(i)
		disk:timer{ name='disk'..i, type="simple_disk", }
		i=i+1
	end

	i=0
	while i < nics() do
		nic=get_nic(i)
		nic:timer{ name='nic'..i, type="simple_nic", }
		i=i+1
	end

	mem=Memory{ name="main", latency=150 } 
	-- we insert this transparent memory tracer 
	-- before main memory and we point to to produce
	-- a trace of all memory accesses into the file 
	-- mem_tracer.txt
	trace=Tracer{ name="trace", trace_file=TRACE_OUT, next=mem } 
	bus=Bus{ name="bus", protocol='MOESI', 
		latency=25, bandwidth=4, next=trace } 
	busT=Bus{ name="tlb_bus", protocol='MOESI', 
		latency=25, bandwidth=4, next=mem }

	i=0
	while i < cpus() do

		cpu=get_cpu(i)
		cpu:timer{ name='cpu'..i, type="timer1" }

		l2=Cache{ name="l2cache", size="1MB", 	
				line_size=64, latency=10, 
				num_sets=16, next=bus, 
				write_policy="WB", write_allocate="true" }

		ic=Cache{ name="icache", size="64kB", 
				line_size=64, latency=0, 
				num_sets=2, next=l2, 
				write_policy="WT", write_allocate="false" }
		dc=Cache{ name="dcache", size="64kB", 
				line_size=64, latency=0, 
				num_sets=2, next=l2, 
				write_policy="WT", write_allocate="false" }

		t2=TLB{ name="l2tlb", page_size="4kB", 
				entries=512, latency=80, 
				num_sets=4, next=busT, 
				write_policy="WB", write_allocate="true" }
		
		it=TLB{ name="itlb", page_size="4kB", 
				entries=32, latency=0, 
				num_sets=32, next=t2, 
				write_policy="WT", write_allocate="false" }
		dt=TLB{ name="dtlb", page_size="4kB", 
				entries=32, latency=0, 
				num_sets=32, next=t2, 
				write_policy="WT", write_allocate="false" }

		cpu:instruction_cache(ic)
		cpu:data_cache(dc)
		cpu:instruction_tlb(it)
		cpu:data_tlb(dt)

		i=i+1
	end
end
-- vim:ft=lua
