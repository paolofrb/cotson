#!/bin/bash
## (C) Copyright 2006-2009 Hewlett-Packard Development Company, L.P.

## Note: this isn't a gnu 'configure' script: it simply checks the
## library dependences, and attempt installing what is missing.
## Requires sudo access to run apt-get.

# Prerequisites:
#
# cotson requires lua, zlib, pqxx and various boost libraries.
#
# We have not tested linux distributions other than Debian or Ubuntu, 
# although it should be possible to find the equivalent packages 
# that install the required libraries
#

SIMNOW_SUPPORTED_VER="4.6.2"

status_args="$*"
simnow_dir=""
root=`pwd`
data_dir="$root/data"
src_dir="$root/src"
cc="gcc"
cxx="g++"
vnctest=1
force=0
if [[ "$SIMNOW_DIR" != "" ]]; then
    simnow_dir=$SIMNOW_DIR
fi
if [[ "$DATA_DIR" != "" ]]; then
    data_dir=$DATA_DIR
fi
if [[ "$CC" != "" ]]; then
   cc="$CC"
fi
if [[ "$CXX" != "" ]]; then
   cxx="$CXX"
fi
while [ $# -gt 0 ]
do
    case $1 in
        --simnow_dir) simnow_dir=$2; shift; shift;;
        --data_dir) data_dir=$2; shift; shift;;
        --cc) cc=$2; shift; shift;;
        --cxx) cxx=$2; shift; shift;;
        --vnctest) vnctest=$2; shift; shift;;
		--force) force=1; shift;;
        *) echo "Usage: $0"
           echo "--simnow_dir simnow_location           set simnow dir"
           echo "--data_dir data_location               set data dir"
           echo "--cc c-compiler                        set C compiler"
           echo "--cxx c++-compiler                     set C++ compiler"
           echo "--vnctest N                            test N vnc ports"
		   echo "--force                                ignore simnow version"
           exit 1
    esac
done

########################################################################
if [[ "$simnow_dir" == "" ]]; then
    echo ""
    echo "ERROR: Cannot find SimNow"
    echo "       You have to define the SIMNOW_DIR env variable"
    echo "       or pass '--simnow_dir <simnow_directory>' to $0"
    echo ""
    echo "       To download a free copy of simnow, please visit"
    echo "       http://developer.amd.com/cpu/simnow"
    echo ""
    exit 1
fi
simnow_dir=`cd $simnow_dir; pwd`
echo "Using SimNow in $simnow_dir"
lib1="$simnow_dir/linuxlibs/libgcc_s.so.1"
lib2="$simnow_dir/linuxlibs/libstdc++.so.6"
if [[ -f $lib1 || -f $lib2 ]]; then
    echo "To avoid system conflicts, we remove $lib1 and $lib2"
    /bin/rm -f $lib1 $lib2
fi
if [[ -f $lib1 || -f $lib2 ]]; then
    echo "ERROR: Something went wrong"
    echo "       make sure $simnow_dir is writeable or remove $lib1 and $lib2 manually"
    exit 1
fi

if [[ $force != 1 ]]; then
    simnow_ver=`cd $simnow_dir; ./simnow --version | awk '/SimNow version/{print $6;}'|sed 's/,//'`
    if [[ $simnow_ver != $SIMNOW_SUPPORTED_VER ]]; then
        echo "ERROR: simnow version is '$simnow_ver'"
	    echo "       The supported version is $SIMNOW_SUPPORTED_VER"
	    exit 1
    fi
fi
echo "SimNow version is $simnow_ver"

########################################################################
dist=`lsb_release -i -s`
ver=`lsb_release -c -s`

ok=0
case $dist in
    Ubuntu)
        case $ver in 
            karmic | intrepid | jaunty) ok=1 ;; 
        esac
        ;;
    Debian)
        case $ver in 
            lenny | squeeze) ok=1 ;; 
        esac
        ;;
esac

if [[ -z $ok ]]; then
    echo ""
    echo "Sorry: $dist $ver not supported"
    echo "Supported versions are: Ubuntu karmic|jaunty|intrepid and Debian squeeze|lenny"
    echo ""
    exit 1;
fi

echo "$dist $ver supported"

pkgs="g++ bison flex ruby rubygems libopenssl-ruby libsqlite3-ruby vnc4server vnc-java 
rxvt xfwm4 xfonts-100dpi xfonts-75dpi zsh sharutils build-essential xvnc4viewer screen \
liblua5.1-0 liblua5.1-0-dev libpqxx-dev zlib1g-dev indent xutils-dev libsqlite3-dev \
sqlite3 libdbd-sqlite3-perl libdbd-pg-perl gnuplot libboost-dev libboost-thread-dev"

echo ""
echo "Checking and installing packages ($pkgs)"
echo "*** NOTE: sudo access required ***"
echo ""
sudo apt-get -q -y install $pkgs
if [[ $? -ne 0 ]]; then
    echo "Could not install one or more of $pkgs"
    echo "Please check your distribution and edit 'configure' to reflect it"
    exit 1
fi
########################################################################

# Fix missing rgb.txt if needed
if [[ ! -f /etc/X11/rgb.txt ]]; then
    sudo cp etc/rgb.txt /etc/X11/rgb.txt
fi

thread_lib="-lboost_thread -lpthread"
ldconfig -p | grep -q boost_thread-mt
if [[ $? -eq 0 ]]; then
    thread_lib="-lboost_thread-mt -lpthread"
fi

v=`$cc --version | head -n 1`
if [[ $v == "" ]]; then
    echo "ERROR: Cannot run $cc"
    exit 1
fi
echo "Using $v"
v=`$cxx --version | head -n 1`
if [[ $v == "" ]]; then
    echo "ERROR: Cannot run $cxx"
    exit 1
fi
echo "Using $v"

##########################################################################
xvnc="Xvnc4"
xfixes=""
grep -q XFIXES `which vnc4server`
if [[ $? -eq 0 ]]; then
    xfixes="-extension XFIXES"
	echo "Adding '$xfixes' to vnc args"
fi
vncargs="-ac -SecurityTypes None -br -pn -httpd /usr/share/vnc-java $xfixes -desktop="
vncwm="xfwm4 --display="
aa_so="$src_dir/abaeterno/abaeterno.so"
med_exe="$src_dir/network/mediator"

for s in \
	src/Make.conf \
	etc/cotson \
	etc/regression-test \
	etc/daemon-start \
	web/etc/local-defaults \
; do
    sed -e "s:@simnow_dir@:$simnow_dir:" \
        -e "s:@data_dir@:$data_dir:" \
        -e "s:@abaeterno_so@:$aa_so:" \
        -e "s:@mediator@:$med_exe:" \
        -e "s:@thread_lib@:$thread_lib:" \
        -e "s:@cc@:$cc:" \
        -e "s:@cxx@:$cxx:" \
        -e "s:@root@:$root:" \
		-e "s:@xvnc@:$xvnc:" \
		-e "s#@vncargs@#$vncargs#" \
		-e "s:@vncwm@:$vncwm:" \
    $s.in > $s
done

#############################################################
if [[ $vnctest -gt 0 ]]; then
    echo "Testing vncserver installation"
    tmpvnc="/tmp/vnc$$"; /bin/rm -rf $tmpvnc; mkdir -p $tmpvnc
    (cd $tmpvnc; cat << 'EOF' | uudecode -o - | tar xfz - --no-same-owner)
begin 644 vnc.tgz
M'XL(`+5^Q$H``^W3S0G",!B`X=Q<(PO8]HM-LXE7J57!BY2F_BSB!&[A=#;1
MBX(4A-3+^UQ"2B`?>6EV.C2Y2JL8.&O#*LY*W$M9QO5%B9A*"N=,^"Y%*4YI
MFWBNZ.C[NM-:[;KUR+EMYZ<8:%I9Z'\);]`?VT1WA,#5L_=X_T7H;XP1I8M$
M\[RA?Y.WM??G3;([8O^A\=?^\OG_2V4,_:<PF]]6U^7^_N\Y````````````
.````\)L'`)4"J0`H````
`
end
EOF
    chmod 700 $tmpvnc/.vnc
    export HOME="$tmpvnc"
    i=0; while [[ $i -lt $vnctest ]]; do
        p=`expr 50 + $i`
        echo "Testing vnc port :$p"
        vnc4server :$p >> $tmpvnc/log 2>&1
        vnc4server -kill :$p >> $tmpvnc/log 2>&1
        i=`expr $i + 1`
    done
    nd=`grep -c 'desktop' $tmpvnc/log`
    if [[ $nd -lt $vnctest ]]; then
        echo "ERROR: only $nd/$vnctest vnc sessions worked".
        echo "       Look at $tmpvnc/log for details"
        exit 1
    fi
    /bin/rm -rf $tmpvnc
fi

echo "./configure $status_args" > config.status
chmod +x config.status
echo "Done"
