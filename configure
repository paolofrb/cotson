#!/bin/bash
## (C) Copyright 2006-2009 Hewlett-Packard Development Company, L.P.

## Note: this isn't a gnu 'configure' script: it simply checks the
## library dependences, and attempt installing what is missing.
## Requires sudo access to run apt-get.

# Prerequisites:
#
# cotson requires lua, zlib, pqxx and various boost libraries.
#
# We have not tested linux distributions other than Debian or Ubuntu, 
# although it should be possible to find the equivalent packages 
# that install the required libraries


SIMNOW_SUPPORTED_VER="4.6.2"
DEBIAN_SUPPORTED_VERS="lenny | squeeze"
FEDORA_SUPPORTED_VERS="Werewolf | Leonidas | Goddard | Laughlin | Lovelock | Verne | BeefyMiracle"
UBUNTU_SUPPORTED_VERS="intrepid | jaunty | karmic | lucid | maverick | natty | oneiric | precise"

status_args="$*"
simnow_dir=""
root=`pwd`
data_dir="$root/data"
src_dir="$root/src"
cc="gcc"
cxx="g++"
vnctest=1
force=0
if [[ "$SIMNOW_DIR" != "" ]]; then
    simnow_dir=$SIMNOW_DIR
fi
if [[ "$DATA_DIR" != "" ]]; then
    data_dir=$DATA_DIR
fi
if [[ "$CC" != "" ]]; then
   cc="$CC"
fi
if [[ "$CXX" != "" ]]; then
   cxx="$CXX"
fi
while [ $# -gt 0 ]
do
    case $1 in
        --simnow_dir) simnow_dir=$2; shift; shift;;
        --data_dir) data_dir=$2; shift; shift;;
        --cc) cc=$2; shift; shift;;
        --cxx) cxx=$2; shift; shift;;
        --vnctest) vnctest=$2; shift; shift;;
	--force) force=1; shift;;
        *) echo "Usage: $0"
           echo "--simnow_dir simnow_location            set simnow dir"
           echo "--data_dir data_location                set data dir"
           echo "--cc c-compiler                         set C compiler"
           echo "--cxx c++-compiler                      set C++ compiler"
           echo "--distro release_name (e.g. karmic)     set Linux Distribution"
           echo "--vnctest N                             test N vnc ports"
		   echo "--force                                ignore simnow version"
           exit 1
    esac
done

########################################################################
if [[ "$simnow_dir" == "" ]]; then
    bdir1="${root}"
    bdir2=`dirname $bdir1`
    bdir3=`dirname $bdir2`
    sdir="simnow-linux64-${SIMNOW_SUPPORTED_VER}pub"
    # Maek some attempt to automatically locate a simnow instllation
    if [[ -d "$bdir3/$sdir" ]]; then simnow_dir="$bdir3/$sdir"; fi
    if [[ -d "$bdir2/$sdir" ]]; then simnow_dir="$bdir2/$sdir"; fi
    if [[ -d "$bdir1/$sdir" ]]; then simnow_dir="$bdir1/$sdir"; fi
fi

if [[ "$simnow_dir" == "" ]]; then
    echo ""
    echo "ERROR: Cannot find SimNow"
    echo "       You have to define the SIMNOW_DIR env variable"
    echo "       or pass '--simnow_dir <simnow_directory>' to $0"
    echo ""
    echo "       To download a free copy of simnow, please visit"
    echo "       http://developer.amd.com/cpu/simnow"
    echo ""
    exit 1
fi

if [[ ! -d "$simnow_dir" ]]; then
    echo "ERROR: Directory '$simnow_dir' not found..."
    exit 1
fi

#info
echo "SIMNOW_DIR: '$simnow_dir'"

mapcount=`sudo sysctl -n vm.max_map_count`
minmap=4194304
if [[ $mapcount -lt $minmap ]]; then
    echo "ERROR: vm.max_map_count = $mapcount is too small"
    echo "    Increase it to at least $minmap by running"
    echo "        sudo sysctl -w vm.max_map_count=$minmap"
    echo ""
    echo "    To make it permanent, add the following line to /etc/sysctl.conf"
    echo "        vm.max_map_count = $minmap"
    exit 1
else
    echo "VM configuration is ok: vm.max_map_count = $mapcount"
fi

########################################################################
ich0=`which lsb_release 2>&1`
ich1=`echo "$ich0"|grep "not found"`
ich2=`echo "$ich0"|grep "no lsb_release"`
ec1=0
ec2=0
if [[ "$ich1" != "" || "$ich2" != "" ]]; then
   #fon't know yet which distro
   #try
   sudo yum -y install redhat-lsb 2>/dev/null
   ec1=$?
   #try
   apt-get -q -q install lsb 2>/dev/null
   ec2=$?
fi

if [[ $ec1 != 0 && $ec2 != 0 ]]; then
   echo "Couldn't find 'lsb_release'command"
   exit 1
fi

dist=`lsb_release -i -s`
ver=`lsb_release -c -s`
echo "Distribution '$dist' - Version '$ver'"

ok=0
shopt -s extglob
case $dist in
    Ubuntu)
        case "$ver" in
            @(${UBUNTU_SUPPORTED_VERS// /}) ) ok=1 ;;
        esac
        ;;
    Debian)
        case "$ver" in
            @(${DEBIAN_SUPPORTED_VERS// /}) ) ok=1 ;;
        esac
        ;;
    Fedora)
        case "$ver" in
            @(${FEDORA_SUPPORTED_VERS// /}) ) ok=1 ;;
        esac
        ;;
esac

if [[ $ok -eq 0 ]]; then
    echo ""
    echo "Sorry: $dist $ver not supported"
    echo "Supported versions are:"
    echo "   UBUNTU: $UBUNTU_SUPPORTED_VERS"
    echo "   DEBIAN: $DEBIAN_SUPPORTED_VERS"
    echo "   FEDORA: $FEDORA_SUPPORTED_VERS"
    echo ""
    exit 1;
fi

echo "$dist $ver supported"
########################################################################

if [[ $dist == "Debian" ||  $dist == "Ubuntu" ]]; then
	pqxx=libpqxx-dev 
	if [[ $ver == "precise" ]]; then pqxx=libpqxx3-dev; fi
    pkgs="g++ bison flex ruby rubygems libopenssl-ruby libsqlite3-ruby vnc4server vnc-java \
rxvt xfwm4 xfonts-100dpi xfonts-75dpi zsh sharutils build-essential xvnc4viewer screen \
liblua5.1-0 liblua5.1-0-dev $pqxx zlib1g-dev indent xutils-dev libsqlite3-dev \
sqlite3 libdbd-sqlite3-perl libdbd-pg-perl gnuplot libboost-dev libboost-thread-dev lzma"
    cmdi="apt-get -q -q"
    xvnc="Xvnc4"
    xvncservctrl="vnc4server"
    vncargs1="-ac -SecurityTypes None -br -pn -httpd /usr/share/vnc-java"
    vncargs2="-desktop="
    llua="llua5.1"
elif [[ $dist == "Fedora" ]]; then
    pkgs="gcc gcc-c++ make dpkg bison flex ruby rubygems rxvt xfwm4 zsh sharutils screen \
gnuplot indent zlib-devel imake xorg-x11-utils ruby-libs openssl ruby-sqlite3 \
vnc-server rxvt lua* libpqxx* boost-devel boost-thread sqlite-devel sqlite lzma \
perl-Class-DBI-SQLite perl-pgsql_perl5 xorg-x11-fonts-100dpi.noarch xorg-x11-fonts-75dpi \
tigervnc tigervnc-server tigervnc-server-module xorg-x11-twm \
"
    cmdi="yum -y"
    xvnc="Xvnc"
    xvncservctrl="vncserver"
    vncargs1="-ac -SecurityTypes None -br -pn -httpd /usr/share/vnc-java"
    vncargs2="-desktop "
    llua="llua"

    #SELinux complains if the SimNow LinuxLibs execute code in the stack
    #The following command clears the stack-execute bit in the SimNow LinuxLibs
    #(alternatively, SELinux can be disabled)
    execstack -c $simnow_dir/linuxlibs/lib*.so.*
fi
########################################################################

simnow_dir=`cd $simnow_dir; pwd`
echo "Using SimNow in $simnow_dir"
lib1="$simnow_dir/linuxlibs/libgcc_s.so.1"
lib2="$simnow_dir/linuxlibs/libstdc++.so.6"
if [[ -f $lib1 || -f $lib2 ]]; then
    echo "To avoid system conflicts, we remove $lib1 and $lib2"
    /bin/rm -f $lib1 $lib2
fi
if [[ -f $lib1 || -f $lib2 ]]; then
    echo "ERROR: Something went wrong"
    echo "       make sure $simnow_dir is writeable or remove $lib1 and $lib2 manually"
    exit 1
fi

if [[ $force != 1 ]]; then
    simnow_ver=`cd $simnow_dir; ./simnow --version | awk '/SimNow version/{print $6;}'|sed 's/,//'`
    if [[ $simnow_ver != $SIMNOW_SUPPORTED_VER ]]; then
        echo "ERROR: simnow version is '$simnow_ver'"
	    echo "       The supported version is $SIMNOW_SUPPORTED_VER"
	    exit 1
    fi
fi
echo "SimNow version is $simnow_ver"
/bin/rm -f $root/simnow
ln -fs $simnow_dir $root/simnow

########################################################################

echo ""
echo "Checking and installing packages ($pkgs)"
echo "*** NOTE: sudo access required ***"
echo ""
sudo $cmdi install $pkgs
if [[ $? -ne 0 ]]; then
    echo "Could not install one or more of $pkgs"
     echo "Please check your distribution and edit 'configure' to reflect it"
    exit 1
fi
echo "Package installation FINISHED"
########################################################################

# Fix missing rgb.txt if needed
if [[ ! -f /etc/X11/rgb.txt ]]; then
    sudo cp etc/rgb.txt /etc/X11/rgb.txt
fi

thread_lib="-lboost_thread -lpthread"
sudo ldconfig -p | grep -q boost_thread-mt
if [[ $? -eq 0 ]]; then
    thread_lib="-lboost_thread-mt -lpthread"
fi

v=`$cc --version | head -n 1`
if [[ $v == "" ]]; then
    echo "ERROR: Cannot run $cc"
    exit 1
fi
echo "Using $v"
v=`$cxx --version | head -n 1`
if [[ $v == "" ]]; then
    echo "ERROR: Cannot run $cxx"
    exit 1
fi
echo "Using $v"

##########################################################################
xfixes=""
grep -q XFIXES `which $xvncservctrl`
if [[ $? -eq 0 ]]; then
    xfixes="-extension XFIXES"
	echo "Adding '$xfixes' to vnc args"
fi
vncargs="$vncargs1 $xfixes $vncargs2"
vncwm="xfwm4 --display="
aa_so="$src_dir/abaeterno/abaeterno.so"
med_exe="$src_dir/network/mediator"

for s in \
        src/examples/tracer/Makefile \
        src/network/Makefile \
        src/common/Makefile \
        src/abaeterno/Makefile \
; do
        cp $s $s.in
done

for s in \
        src/Make.conf \
        etc/cotson \
        etc/regression-test \
        etc/daemon-start \
        web/etc/local-defaults \
        src/examples/tracer/Makefile \
        src/network/Makefile \
        src/common/Makefile \
        src/abaeterno/Makefile \
; do
    sed -e "s:@simnow_dir@:$simnow_dir:" \
        -e "s:@data_dir@:$data_dir:" \
        -e "s:@abaeterno_so@:$aa_so:" \
        -e "s:@mediator@:$med_exe:" \
        -e "s:@thread_lib@:$thread_lib:" \
        -e "s:@cc@:$cc:" \
        -e "s:@cxx@:$cxx:" \
        -e "s:@root@:$root:" \
                -e "s:@xvnc@:$xvnc:" \
                -e "s#@vncargs@#$vncargs#" \
                -e "s:@vncwm@:$vncwm:" \
        -e "s:llua5.1:$llua:" \
    $s.in > $s
done


#############################################################
if [[ $vnctest -gt 0 ]]; then
    echo "Testing vncserver installation"
    tmpvnc="/tmp/vnc$$"; /bin/rm -rf $tmpvnc; mkdir -p $tmpvnc
    (cd $tmpvnc; cat << 'EOF' | uudecode -o - | tar xfz - --no-same-owner)
begin 644 vnc.tgz
M'XL(`+5^Q$H``^W3S0G",!B`X=Q<(PO8]HM-LXE7J57!BY2F_BSB!&[A=#;1
MBX(4A-3+^UQ"2B`?>6EV.C2Y2JL8.&O#*LY*W$M9QO5%B9A*"N=,^"Y%*4YI
MFWBNZ.C[NM-:[;KUR+EMYZ<8:%I9Z'\);]`?VT1WA,#5L_=X_T7H;XP1I8M$
M\[RA?Y.WM??G3;([8O^A\=?^\OG_2V4,_:<PF]]6U^7^_N\Y````````````
.````\)L'`)4"J0`H````
`
end
EOF
    chmod 700 $tmpvnc/.vnc
    export HOME="$tmpvnc"
    i=0; while [[ $i -lt $vnctest ]]; do
        p=`expr 50 + $i`
        echo "Testing vnc port :$p"
        $xvncservctrl :$p >> $tmpvnc/log 2>&1
        $xvncservctrl -kill :$p >> $tmpvnc/log 2>&1
        i=`expr $i + 1`
    done
    nd=`grep -c 'desktop' $tmpvnc/log`
    if [[ $nd -lt $vnctest ]]; then
        echo "ERROR: only $nd/$vnctest vnc sessions worked".
        echo "       Look at $tmpvnc/log for details"
        exit 1
    fi
    /bin/rm -rf $tmpvnc
fi

echo "./configure $status_args" > config.status
chmod +x config.status
echo "Done"
