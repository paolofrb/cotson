<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>help</title>
<meta name="GENERATOR" content="HTML Transit 7.0 by Stellent (tm), Inc. www.stellent.com">
<meta name="TransitPubID" content="443">
</head>
<body><a name="TopOfPage"> </a>
<!-- TRANSIT - INFOBEFORE -->
<p align="left"><a href="help-57.htm#TopOfPage"><img src="images/back.png" alt="Previous Page" border="0"></a><a href="help.htm"><img src="images/home.png" alt="Home" border="0"></a><a href="help-02.htm"><img src="images/toc.png" alt="Table Of Contents" border="0"></a><a href="help-61.htm"><img src="images/index.png" alt="Index" border="0"></a><a href="help-59.htm#TopOfPage"><img src="images/forward.png" alt="Next Page" border="0"></a></p>

  <ul><p><a name="P5782_284999"></a><i><font face="Arial" size="+1"><b>1.6  <a name="P5782_285004"></a>Instruction Reference</b></font></i></p>

  <p><font face="Times New Roman">This section specifies the hexadecimal and/or binary encodings for the opcodes that SimNow does (<img src="images/help-2.gif" border="0" width="16" height="15">), does not (<img src="images/help-89.gif" border="0" width="16" height="15">) or does partially (<img src="images/help-156.gif" border="0" width="16" height="15">) simulate when simulating an AMD 8<sup>th</sup> Generation CPU, Rev. F.</font></p>

      <ul><ul><p><font face="Arial" size="+1"><b><a name="P5784_285217"></a>1.6.1 Notation</b></font></p>

  </ul></ul><p><a name="P5785_285231"></a><b><font face="Arial">1.6.1.1 Mnemonic Syntax</font></b></p>

  <p><font face="Times New Roman">Each instruction has a syntax that includes the mnemonic and any operands that the instruction can take. <a href="#P5791_285674">Figure A</a>-1 shows an example of a syntax in which the instruction takes two operands. In most instruction that take two operands, the first (left-most) operand is both a source operand (the first source operand) and the destination operand. The second (right-most) operand serves only as a source, not a destination.</font> </p>

  <p><img src="images/help-157.gif" border="0" width="347" height="87"><br>
</p>

  <p align="center"><font face="Times New Roman"><b><a name="P5791_285674"></a>Figure A-1: Syntax for Typical Two-Operand Instruction</b></font></p>

  <p><font face="Times New Roman">The following notation is used to denote the size and type of source and destination operands:</font></p>

    <ul><p><font face="Times New Roman"><i>&#8226; cReg</i> &#8211; Control Register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; dReg</i> &#8211; Debug register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; imm8</i> &#8211; Byte (8-Bit) immediate.</font></p>

    <p><font face="Times New Roman"><i>&#8226; imm16 </i>&#8211; Word (16-Bit) immediate.</font></p>

    <p><font face="Times New Roman"><i>&#8226; imm16/32</i> &#8211; Word (16-bit) or doubleword (32-bit) immediate.</font></p>

    <p><font face="Times New Roman"><i>&#8226; imm32</i> &#8211; Doubleword (32-bit) immediate.</font></p>

    <p><font face="Times New Roman"><i>&#8226; imm32/64</i> &#8211; Doubleword (32-bit) or quadword (64-bit) immediate.</font></p>

    <p><font face="Times New Roman"><i>&#8226; imm64 &#8211; Quadword (64-bit) immediate.</i></font></p>

    <p><font face="Times New Roman"><i>&#8226; mem</i> &#8211; An operand of unspecified size in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem8</i> &#8211; Byte (8-bit) operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem16</i> &#8211; Word (16-bit) operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem16/32 </i>&#8211; Word (16-bit) or doubleword (32-bit) operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem32 </i>&#8211; Doubleword (32-bit) operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem32/48 </i>&#8211; Doubleword (32-bit) or 48-bit operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem48 </i>&#8211; 48-bit operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem64 </i>&#8211; Quadword (64-bit) operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem16:16 </i>&#8211; Two sequential word (16-bit) operands in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem16:32</i> &#8211; A doubleword (32-bit) operand followed by a word (16-bit) operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem32real </i>&#8211; Single precision (32-bit) floating-point operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem32int</i> &#8211; Doubleword (32-bit) integer operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem64real </i>&#8211; Double-precision (64-bit) floating-point operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem64int</i> &#8211; Quadword (64-bit) integer operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem80real </i>&#8211; Double-extended-precision (80-bit) floating-point operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem80dec </i>&#8211; 80-bit packed BCD operand in memory, containing 18 4-bit BCD digits.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem2env </i>&#8211; 16-bit x87 control word or x87 status word.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem14/28env</i> &#8211; 14-byte or 28-byte x87 environment. The x87 environment consists of the x87 control word, x87 status word, x87 tag word, last non-control instruction pointer, last data pointer, and opcode of the last non-control instruction completed.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem94/108env</i> &#8211; 94-byte or 108-byte x87 environment and register stack.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mem512env</i> &#8211; 512-byte environment for 128-bit media, 64-bit media, and x87 instructions.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mmx </i>&#8211; Quadword (64-bit) operand in an MMX&#8482; register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mmx1</i> &#8211; Quadword (64-bit) operand in an MMX register, specified as the left-most (first) operand in the instruction syntax.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mmx2</i> - Quadword (64-bit) operand in an MMX register, specified as the right-most (second) operand in the instruction syntax.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mmx/mem32</i> &#8211; Doubleword (32-bit) operand in an MMX register or memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mmx/mem64 </i>&#8211; Quadword (64-bit) operand in an MMX register or memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mmx1/mem64</i> - Quadword (64-bit) operand in an MMX register or memory, specified as the left-most (first) operand in the instruction syntax.</font></p>

    <p><font face="Times New Roman"><i>&#8226; mmx2/mem64</i> - Quadword (64-bit) operand in an MMX register or memory, specified as the right-most (second) operand in the instruction syntax.</font></p>

    <p><font face="Times New Roman"><i>&#8226; moffset</i> &#8211; Memory offset of unspecified size.</font></p>

    <p><font face="Times New Roman"><i>&#8226; moffset8</i> &#8211; Operand in memory located at the specified byte (8-bit) offset from the instruction pointer.</font></p>

    <p><font face="Times New Roman"><i>&#8226; moffset16</i> - Operand in memory located at the specified word (16-bit) offset from the instruction pointer.</font></p>

    <p><font face="Times New Roman"><i>&#8226; moffset32</i> - Operand in memory located at the specified doubleword (32-bit) offset from the instruction pointer.</font></p>

    <p><font face="Times New Roman"><i>&#8226; pntr16:16</i> &#8211; Far pointer with 16-bit selector and 16-bit offset.</font></p>

    <p><font face="Times New Roman"><i>&#8226; pntr16:32</i> - Far pointer with 16-bit selector and 32-bit offset.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg</i> &#8211; Operand of unspecified size in a GPR register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg8</i> &#8211; Byte (8-bit) operand in a GPR register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg16</i> &#8211; Word (16-bit) operand in a GPR register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg16/32</i> - Word (16-bit) or doubleword (32-bit) operand in a GPR register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg32</i> &#8211; Doubleword (32-bit) operand in a GPR register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg64</i> - Quadword (64-bit) operand in a GPR register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg/mem8</i> &#8211; Byte (8-bit) operand in a GPR register or memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg/mem16</i> &#8211; Word (16-bit) operand in a GPR register or memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg/mem32</i> &#8211; Doubleword (32-bit) operand in a GPR register or memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; reg/mem64</i> &#8211; Quadword (64-bit) operand in a GPR register or memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; rel8off</i> &#8211; Relative address in the current code segment, in 8-bit offset range.</font></p>

    <p><font face="Times New Roman"><i>&#8226; rel16off</i> - Relative address in the current code segment, in 16-bit offset range.</font></p>

    <p><font face="Times New Roman"><i>&#8226; rel32off</i> - Relative address in the current code segment, in 32-bit offset range.</font></p>

    <p><font face="Times New Roman"><i>&#8226; segReg or sReg</i> &#8211; Word (16-bit) operand in a segment register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; ST(0)</i> &#8211; x87 stack register 0.</font></p>

    <p><font face="Times New Roman"><i>&#8226; ST(i)</i> &#8211; x87 stack register <i>i</i>, where <i>i</i> is between 0 and 7.</font></p>

    <p><font face="Times New Roman"><i>&#8226; xmm</i> &#8211; Double quadword (128-bit) operand in an XMM register.</font></p>

    <p><font face="Times New Roman"><i>&#8226; xmm1</i> &#8211; Double quadword (128-bit) operand in an XMM register, specified as the left-most (first) operand in the instruction syntax..</font></p>

    <p><font face="Times New Roman"><i>&#8226; xmm2</i> &#8211; Double quadword (128-bit) operand in an XMM register, specified as the right-most (second) operand in the instruction syntax.</font></p>

    <p><font face="Times New Roman"><i>&#8226; xmm/mem64</i> &#8211; Quadword (64-bit) operand in a 128-bit XMM register or memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; xmm/mem128</i> &#8211; Double quadword (128-bit) operand in a 128-bit operand in an XMM register or memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; xmm1/mem128 </i>&#8211; Double quadword (128-bit) operand in a 128-bit operand in an XMM register or memory, specified as the left-most (first) operand in the instruction syntax..</font></p>

    <p><font face="Times New Roman"><i>&#8226; xmm2/mem128 </i>&#8211; Double quadword (128-bit) operand in a 128-bit operand in an XMM register or memory, specified as the right-most (second) operand in the instruction syntax.</font></p>

  </ul><p><a name="P5858_290881"></a><font face="Arial"><b>1.6.1.2 Opcode Syntax</b></font></p>

  <p><font face="Times New Roman">In addition to the notation shown in above in &#8220;</font><font face="Arial"><a href="#P5785_285231">Mnemonic Syntax</a></font><font face="Times New Roman">&#8221; on page <a href="#P5785_285231">190</a>, the following notation indicates the size and type of operands in the syntax of instruction syntax.</font></p>

    <ul><p><font face="Times New Roman"><i>&#8226; /digit</i> &#8211; Indicates that the ModRM byte specifies only one register or memory (r/m) operand. The digit is specified by the ModRM reg field and is used as an instruction-opcode extension. Valid digit values range from 0 to 7.</font></p>

    <p><font face="Times New Roman"><i>&#8226; /r</i> &#8211; Indicates that the ModRM byte specifies both a register and operand and a <i>reg/mem</i> (register or memory) operand.</font></p>

    <p><font face="Times New Roman"><i>&#8226; cb, cw, cd ,cp</i> &#8211; Specified a code-offset value and possibly a new code-segment register value. The value following the opcode is either one byte (cb), two bytes (cw), four bytes (cd), or six bytes (cp).</font></p>

    <p><font face="Times New Roman"><i>&#8226;  ib, iw, id </i>&#8211; Specifies an immediate-operand value. The opcode determines whether the value is signed or unsigned. The value following the opcode, ModRM, or SIB byte is either one byte (ib), two bytes (iw), or four bytes (id). Word and doubleword values start wit the low-order byte.</font></p>

    <p><font face="Times New Roman"><i>&#8226; +rb, +rw, +rd, +rq</i> &#8211; Specifies a register value that is added to the hexadecimal byte on the left, forming a one-byte opcode. The result is an instruction that operates on the register specified by the register code. Valid register-code values are shown in &#8220;<i>AMD x86-64 Architecture: Programmer&#8217;s Manual, Volume 3</i>&#8221;.</font></p>

    <p><font face="Times New Roman"><i>&#8226; m64</i> &#8211; Specifies a quadword (64-bit) operand in memory.</font></p>

    <p><font face="Times New Roman"><i>&#8226; +i</i> &#8211; Specifies an x87 floating-point stack operand, ST(<i>i</i>). The value is used only with x87 floating-point instructions. It is added to the hexadecimal byte on the left, forming a one-byte opcode. Valid values range from 0 to 7.</font></p>

      <ul><p><font face="Arial" size="+1"><b><a name="P5868_292549"></a>1.6.2 General Purpose Instructions</b></font></p>

</ul></ul><p><font face="Times New Roman">This chapter describes the function, mnemonic syntax, and opcodes that the simulator simulates. General-purpose instructions are used in basic software execution. Most of these instructions load, store, or operate on data location in the general-purpose registers (GPRs), in memory, or in both. The remaining instructions are used to alter the sequential flow of the program by branching to other locations within the program, or to entirely different programs.</font></p></ul>
<p><ul>
<center><table border="1">
<tr>
<td width="196"></td>
<td width="97"></td>
<td width="252"></td>
<td width="67"></td></tr>
<tr>
<td colspan="3" bgcolor="#e6e6e6" valign="top" width="546"><p align="center"><font face="Times New Roman" size="-1"><b>Instruction</b></font></p>
</td>
<td rowspan="2" bgcolor="#e6e6e6" valign="top" width="67"><p align="center"><b><font face="Times New Roman" size="-1">Supported</font></b></p>
</td></tr>
<tr>
<td bgcolor="#e6e6e6" valign="top" width="196"><p align="center"><b><font face="Times New Roman" size="-1">Mnemonic</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="97"><p align="center"><b><font face="Times New Roman" size="-1">Opcode</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="252"><p align="center"><b><font face="Times New Roman" size="-1">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AAA</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">37</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Create an unpacked BCD number.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AAD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Adjust two BCD digits in AL and AH.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AAM</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Create a pair of unpacked BCD values in AH and AL.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AAS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">3F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Create an unpacked BCD number from the contents of the AL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">14 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm8</i> to AL + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC AL,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">14 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm16</i> to AX + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC EAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">15 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm32</i> to EAX + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC RAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">15 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add sign-ext. <i>imm32</i> to RAX + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem8,imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 /2 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm8</i> to <i>reg/mem8</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem16,imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /2 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm16</i> to <i>reg/mem16</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem32,imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /2 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm32</i> to <i>reg/mem32</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem64,imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /2 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add sign-ext. <i>imm32</i> to <i>reg/mem64</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem16,imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /2 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add sign-ext. <i>imm8</i> to <i>reg/mem16</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem32,imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /2 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add sign-ext. <i>imm8</i> to <i>reg/mem32</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem64,imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /2 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add sign-ext. <i>imm8</i> to <i>reg/mem64</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem8,reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">10 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg8</i> to <i>reg/mem8</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem16,reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">11 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg16</i> to <i>reg/mem16</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem32,reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">11 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg32</i> to <i>reg/mem32</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg/mem64,reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">11 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg64</i> to <i>reg/mem64</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg8,reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">12 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg/mem8</i> to <i>reg8</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg16,reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">13 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg/mem16</i> to <i>reg16</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg32,reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">13 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg/mem32</i> to <i>reg32</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADC <i>reg64,reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">13 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg/mem64</i> to <i>reg64</i> + CF.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">04 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm8</i> to AL.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD AX,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">05 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm16</i> to AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD EAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">05 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">ADD <i>imm32</i> to EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD RAX,<i>imm64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">05 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">ADD <i>imm64 </i>to RAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem8,imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm8</i> to <i>reg/mem8</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem16,imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /0 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm16</i> to <i>reg/mem16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem32,imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /0 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>imm32</i> to <i>reg/mem32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem64,imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /0 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add sign-ext. <i>imm32</i> to <i>reg/mem64</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem16,imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add sign-ext. <i>imm8</i> to <i>reg/mem16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem32,imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add sign-ext. <i>imm8</i> to <i>reg/mem32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem64,imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add sign-ext. <i>imm8</i> to <i>reg/mem64</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem8,reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">00 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg8</i> to <i>reg/mem8</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem16,reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">01 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg16</i> to <i>reg/mem16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem32,reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">01 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg32</i> to <i>reg/mem32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg/mem64,reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">01 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg64</i> to <i>reg/mem64</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg8,reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">02 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg/mem8</i> to <i>reg8</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg16,reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">03 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg/mem16</i> to <i>reg16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg32,reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">03 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg/mem32</i> to <i>reg32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ADD <i>reg64,reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">03 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Add <i>reg/mem64</i> to <i>reg64</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">24 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of AL with an immediate 8-bit value and store the result in AL.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND AX,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">25 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of AX with an immediate 16-bit value and store the result in AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND EAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">25 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of EAX with an immediate 32-bit value and store the result in EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND RAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">25 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of RAX with a sign-extended immediate 32-bit value and store the result in RAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of <i>reg/mem8</i> with <i>imm8</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /4 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of <i>reg/mem16</i> with <i>imm16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /4 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of <i>reg/mem32</i> with <i>imm32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem64</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /4 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of <i>reg/mem64</i> with a sign-extended <i>imm32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of <i>reg/mem16</i> with a sign-extended 8-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of <i>reg/mem32</i> with a sign-extended 8-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of <i>reg/mem64</i> with a sign-extended 8-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">20 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of an 8-bit register or memory location with the contents of an 8-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">21 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of a 16-bit register or memory location with the contents of a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">21 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of a 32-bit register or memory location with the contents of a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">21 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of a 16-bit register or memory location with the contents of a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg8</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">22 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of an 8-bit register with the contents of an 8-bit memory location or register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">23 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of a 16-bit register with the contents of a 16-bit memory location or register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">23 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of a 32-bit register with the contents of a 32-bit memory location or register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">AND <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">23 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of a 64-bit register with the contents of a 64-bit memory location or register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BOUND <i>reg16</i>,mem<i>16&amp;mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">62 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Test whether a 16-bit array index is within the bounds specified by the two 16-bit values in <i>mem16&amp;mem16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BOUND <i>reg32</i>,mem32<i>&amp;mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">62 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Test whether a 32-bit array index is within the bounds specified by the two 32-bit values in <i>mem32&amp;mem32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BSF <i>reg16</i>,<i>reg/mmem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BC /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Bit scan forward on the contents of <i>reg/mem16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BSF <i>reg32</i>,<i>reg/mmem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BC /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Bit scan forward on the contents of <i>reg/mem32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BSF <i>reg64</i>,<i>reg/mmem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BC /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Bit scan forward on the contents of <i>reg/mem64</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BSR <i>reg16</i>,<i>reg/mmem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BD /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Bit scan reverse on the contents of <i>reg/mem16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BSR <i>reg32</i>,<i>reg/mmem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BD /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Bit scan reverse on the contents of <i>reg/mem32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BSR <i>reg64</i>,<i>reg/mmem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BD /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Bit scan reverse on the contents of <i>reg/mem64</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BSWAP <i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F C8 <i>+rd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Reverse the byte order of <i>reg32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BSWAP <i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F C8 <i>+rd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Reverse the byte order of <i>reg64</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BT <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A3 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BT <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A3 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BT <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A3 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BT <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BT <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BT <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTC <i>mem/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BB /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then complement the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTC <i>mem/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BB /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then complement the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTC <i>mem/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BB /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then complement the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTC <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then complement the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTC <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then complement the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTC <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then complement the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTR <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B3 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then clear the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTR <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B3 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then clear the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTR <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B3 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then clear the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTR <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /6 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then clear the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTR <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /6 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then clear the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTR <i>reg/mem64</i>,<i>imm64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /6 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then clear the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTS <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AB /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then set the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTS <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AB /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then set the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTS <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AB /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then set the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTS <i>reg/mem16</i>,imm8</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then set the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTS <i>reg/mem32</i>,imm8</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then set the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">BTS <i>reg/mem64</i>,imm8</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BA /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Copy the value of the selected bit to the carry flag, and then set the selected bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CALL <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E8 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near call with the target specified by a 16-bit relative displacement.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CALL <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E8 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near call with the target specified by a 32-bit relative displacement.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CALL <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near call with the target specified by <i>reg/mem16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CALL <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near call with the target specified by <i>reg/mem32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CALL <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near call with the target specified by <i>reg/mem64</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CALL FAR <i>pntr16:16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9A <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far call direct, with the target specified by a far pointer contained in the instruction.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CALL FAR <i>pntr16:32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9A <i>cp</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far call direct, with the target specified by a far pointer contained in the instruction.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CALL FAR <i>mem16:16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far call indirect, with the target specified by a far pointer in memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CALL FAR <i>mem16:32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far call indirect, with the target specified by a far pointer in memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CBW</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">98</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Sign-extend AL into AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CWDE</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">98</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Sign-extend AX into EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CDQE</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">98</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Sign-extend EAX into RAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CWD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">99</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Sign-extend AX into DX:AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CDQ</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">99</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Sign-extend EAX into EDX:EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CQO</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">99</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Sign-extend RAX into RDX:RAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CLC</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F8</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Clear the carry flag (CF) to zero.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CLD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FC</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Clear the direction flag (DF) to zero.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CFLUSH <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AE /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Flush cache line containing <i>mem8</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMC</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Complement the carry flag (CF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVO <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 40 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if overflow (OF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVO <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 40 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if overflow (OF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVO <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 40 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if overflow (OF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNO <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 41 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not overflow (OF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNO <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 41 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not overflow (OF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNO <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 41 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not overflow (OF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVB <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 42 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if below (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVB <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 42 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if below (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVB <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 42 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if below (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVC <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 42 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if carry (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVC <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 42 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if carry (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVC <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 42 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if carry (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNAE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 42 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not above or equal (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNAE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 42 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not above or equal (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNAE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 42 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not above or equal (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNB <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 43 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not below (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNB <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 43 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not below (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNB <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 43 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not below (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNC <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 43 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not carry (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNC <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 43 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not carry (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNC <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 43 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not carry (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVAE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 43 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if above or equal (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVAE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 43 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if above or equal (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVAE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 43 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if above or equal (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVZ <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 44 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if zero (ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVZ <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 44 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if zero (ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVZ <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 44 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if zero (ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 44 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if equal (ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 44 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if equal (ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 44 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if equal (ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNZ <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 45 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not zero (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNZ <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 45 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not zero (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNZ <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 45 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not zero (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 45 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not equal (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 45 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not equal (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 45 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not equal (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVBE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 46 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if below or equal (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVBE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 46 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if below or equal (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVBE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 46 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if below or equal (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNA <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 46 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not above (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNA <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 46 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not above (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNA <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 46 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not above (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNBE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 47 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not below or equal (CF = 0 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNBE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 47 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not below or equal (CF = 0 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNBE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 47 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not below or equal (CF = 0 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVA <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 47 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if above (CF = 1 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVA <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 47 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if above (CF = 1 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVA <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 47 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if above (CF = 1 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVS <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 48 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if sign (SF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVS <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 48 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if sign (SF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVS <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 48 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if sign (SF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNS <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 49 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not sign (SF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNS <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 49 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not sign (SF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNS <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 49 /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not sign (SF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVP <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4A /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if parity (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVP <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4A /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if parity (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVP <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4A /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if parity (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVPE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4A /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if parity even (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVPE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4A /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if parity even (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVPE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4A /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if parity even (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNP <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4B /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not parity (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNP <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4B /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not parity (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNP <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4B /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not parity (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVPO <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4B /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if parity odd (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVPO <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4B /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if parity odd (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVPO <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4B /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if parity odd (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVL <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4C /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if less (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVL <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4C /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if less (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVL <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4C /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if less (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNGE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4C /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not greater or equal (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNGE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4C /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not greater or equal (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNGE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4C /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not greater or equal (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNL <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4D /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not less (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNL <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4D /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not less (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNL <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4D /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not less (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVGE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4D /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if greater or equal (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVGE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4D /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if greater or equal (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVGE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4D /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if greater or equal (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVLE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4E /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if less or equal (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVLE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4E /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if less or equal (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVLE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4E /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if less or equal (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNG <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4E /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if less not greater (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNG <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4E /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if less not greater (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNG <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4E /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if less not greater (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNLE <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4F /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not less or equal (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNLE <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4F /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not less or equal (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVNLE <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4F /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if not less or equal (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVG <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4F /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if greater (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVG <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4F /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if greater (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMOVG <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 4F /r </font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move if greater (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">3C <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare an 8-bit immediate value with the contents of the AL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP AX,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">3D <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare a 16-bit immediate value with the contents of the AX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP EAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">3D <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare a 32-bit immediate value with the contents of the EAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP RAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">3D <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare a 32-bit immediate value with the contents of the RAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 /7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare an 8-bit value with the contents of an 8-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /7 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare a 16-bit value with the contents of a 16-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /7 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare a 32-bit value with the contents of a 32-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem64</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /7 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare a 32-bit signed immediate value with the contents of a 64-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare an 8-bit signed immediate value with the contents of a 16-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /7 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare an 8-bit signed immediate value with the contents of a 32-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /7 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare an 8-bit signed immediate value with the contents of a 64-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">38 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of an 8-bit register or memory operand with the contents of an 8-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">39 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of a 16-bit register or memory operand with the contents of a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">39 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of a 32-bit register or memory operand with the contents of a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">39 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of a 64-bit register or memory operand with the contents of a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg8</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">3A /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of an 8-bit register with the contents of an 8-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">3B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of a 16-bit register with the contents of a 16-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">3B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of a 32-bit register with the contents of a 32-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMP <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">3B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of a 64-bit register with the contents of a 64-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPS <i>mem8</i>,<i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A6</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the byte at DS:rSI with the byte at ES:rDI and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPS <i>mem16</i>,<i>mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the word at DS:rSI with the word at ES:rDI and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPS <i>mem32</i>,<i>mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the doubleword at DS:rSI with the doubleword at ES:rDI and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPS <i>mem64</i>,<i>mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the quadword at DS:rSI with the quadword at ES:rDI and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPSB</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A6</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the byte at DS:rSI with the byte at ES:rDI and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPSW</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the word at DS:rSI with the word at ES:rDI and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPSD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the doubleword at DS:rSI with the doubleword at ES:rDI and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPSQ</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the quadword at DS:rSI with the quadword at ES:rDI and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPXCHG <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B0 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare AL register with an 8-bit register or memory location. If equal, copy the second operand to the first operand. Otherwise, copy the first operand to AL.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPXCHG <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B1 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare AX register with a 16-bit register or memory location. If equal, copy the second operand to the first operand. Otherwise, copy the first operand to AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPXCHG <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B1 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare EAX register with a 32-bit register or memory location. If equal, copy the second operand to the first operand. Otherwise, copy the first operand to EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPXCHG <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B1 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare RAX register with a 64-bit register or memory location. If equal, copy the second operand to the first operand. Otherwise, copy the first operand to RAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CMPXCHG8B</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F C7 /1 <i>m64</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare EDX:EAX register to 64-bit memory location. If equal, set the zero flag (ZF) to 1 and copy the ECX:EBX register to the memory location. Otherwise, copy the memory location to EDX:EAX and clear the zero flag.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">CPUID</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Executes the CPUID function whose number is in the EAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DAA</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">27</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decimal adjust AL.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DAS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">2F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decimal adjusts AL after subtraction.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DEC <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FE /1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement the contents of an 8-bit register or memory location by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DEC <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement the contents of a 16-bit register or memory location by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DEC <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement the contents of a 32-bit register or memory location by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DEC <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement the contents of a 64-bit register or memory location by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DEC <i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">48 <i>+rw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement the contents of a 16-bit register by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DEC <i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">48 <i>+rd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement the contents of a 32-bit register by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DIV <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F6 /6</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Perform unsigned division of AX by the contents of an 8-bit register or memory location and store the quotient in AL and the remainder in AH.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DIV <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /6</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Perform unsigned division of DX:AX by the contents of a 16-bit register or memory location and store the quotient in AX and the remainder in DX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DIV <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /6</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Perform unsigned division of EDX:EAX by the contents of a 32-bit register or memory location and store the quotient in EAX and the remainder in EDX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">DIV <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /6</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Perform unsigned division of RDX:RAX by the contents of a 64-bit register or memory location and store the quotient in RAX and the remainder in RDX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ENTER <i>imm16</i>,0</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">CB <i>iw </i>00</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Create a procedure stack frame.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-156.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ENTER <i>imm16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">CB <i>iw </i>01</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Create a nested stack frame for a procedure.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-156.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ENTER <i>imm16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">CB <i>iw ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Create a nested stack frame for a procedure.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-156.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IDIV <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F6 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Perform signed division of AX by the contents of an 8-bit register or memory location and store the quotient in AL and the remainder in AH.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IDIV <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Perform signed division of DX:AX by the contents of a 16-bit register or memory location and store the quotient in AX and the remainder in DX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IDIV <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Perform signed division of EDX:EAX by the contents of a 32-bit register or memory location and store the quotient in EAX and the remainder in EDX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IDIV <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Perform signed division of RDX:RAX by the contents of a 64-bit register or memory location and store the quotient in RAX and the remainder in RDX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F6 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of AL by the contents of an 8-bit memory or register operand and put the signed result in AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of AX by the contents of a 16-bit memory or register operand and put the signed result in DX:AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of EAX by the contents of a 32-bit memory or register operand and put the signed result in EDX:EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of RAX by the contents of a 64-bit memory or register operand and put the signed result in RDX:RAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">OF AF /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of a 16-bit destination register by the contents of a 16-bit register or memory operand and put the signed result the 16-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">OF AF /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of a 32-bit destination register by the contents of a 32-bit register or memory operand and put the signed result the 32-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">OF AF /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of a 64-bit destination register by the contents of a 64-bit register or memory operand and put the signed result the 64-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg16</i>,<i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6B /r <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of a 16-bit register or memory operand by a sign-extended immediate byte and put the signed result in the 16-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg32</i>,<i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6B /r <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of a 32-bit register or memory operand by a sign-extended immediate byte and put the signed result in the 32-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg64</i>,<i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6B /r <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of a 64-bit register or memory operand by a sign-extended immediate byte and put the signed result in the 64-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg16</i>,<i>reg/mem16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">69 /r <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of a 16-bit register or memory operand by a sign-extended immediate word and put the signed result in the 16-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg32</i>,<i>reg/mem32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">69 /r <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of a 32-bit register or memory operand by a sign-extended immediate double and put the signed result in the 32-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IMUL <i>reg64</i>,<i>reg/mem64</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">69 /r <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiply the contents of a 64-bit register or memory operand by a sign-extended immediate double and put the signed result in the 64-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IN AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a byte from the port at the address specified by <i>imm8</i> and put it into the AL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IN AX,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a word from the port at the address specified by <i>imm8</i> and put it into the AX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IN EAX,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a doubleword from the port at the address specified by <i>imm8</i> and put it into the EAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IN AL,DX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">EC</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a byte from the port at the address specified by the DX register and put it into the AL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IN AX,DX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">ED</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a word from the port at the address specified by the DX register and put it into the AX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">IN EAX,EDX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">ED</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a doubleword from the port at the address specified by the EDX register and put it into the EAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INC <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FE /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Increment the contents of an 8-bit register or memory location by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INC <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Increment the contents of a 16-bit register or memory location by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INC <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Increment the contents of a 32-bit register or memory location by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INC <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Increment the contents of a 64-bit register or memory location by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INC <i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">40 <i>+rw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Increment the contents of a 16-bit register by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INC <i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">40 <i>+rd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Increment the contents of a 32-bit register by 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INS <i>mem8</i>,DX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6C</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a byte from the port specified by DX, put it into the memory location specified in ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INS <i>mem16</i>,DX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6D</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a word from the port specified by DX, put it into the memory location specified in ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INS <i>mem32</i>,DX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6D</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a doubleword from the port specified by DX, put it into the memory location specified in ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INSB</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6C</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a byte from the port specified by DX, put it into the memory location specified in ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INSW</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6D</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a word from the port specified by DX, put it into the memory location specified in ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INSD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6D</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Input a doubleword from the port specified by DX, put it into the memory location specified in ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INT <i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">CD <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Calls interrupt service routine specified by interrupt vector <i>imm8</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">INTO</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">CE</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Calls overflow exception if the overflow flag is set.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JO <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if overflow (OF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JO <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 80 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if overflow (OF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JO <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 80 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if overflow (OF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNO <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">71 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not overflow (OF = 0)</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNO <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 81 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not overflow (OF = 0)</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNO <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 81 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not overflow (OF = 0)</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JB <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">72 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if below (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JB <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 82 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if below (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JB <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 82 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if below (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JC <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">72 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if carry (CF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JC <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 82 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if carry (CF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JC <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 82 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if carry (CF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNAE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">72 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not above or equal (CF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNAE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 82 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not above or equal (CF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNAE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 82 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not above or equal (CF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNB <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">73 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not below (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNB <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 83 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not below (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNB <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 83 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not below (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNC <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">73 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not carry (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNC <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 83 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not carry (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNC <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 83 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not carry (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JAE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">73 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if above or equal (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JAE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 83 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if above or equal (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JAE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 83 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if above or equal (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JZ <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">74 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if zero (ZF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JZ <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 84 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if zero (ZF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JZ <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 84 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if zero (ZF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">74 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if equal (ZF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 84 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if equal (ZF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 84 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if equal (ZF =1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNZ <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">75 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not zero (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNZ <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 85 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not zero (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNZ <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 85 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not zero (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">75 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not equal (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 85 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not equal (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 85 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not equal (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JBE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">76 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if below or equal (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JBE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 86 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if below or equal (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JBE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 86 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if below or equal (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNA <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">76 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not above (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNA <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 86 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not above (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNA <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 86 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not above (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNBE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">77 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not below or equal (CF = 0 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNBE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 87 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not below or equal (CF = 0 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNBE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 87 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not below or equal (CF = 0 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JA <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">77 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if above (CF = 0 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JA <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 87 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if above (CF = 0 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JA <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 87 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if above (CF = 0 or ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JS <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">78 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if sign (SF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JS <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 88 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if sign (SF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JS <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 88 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if sign (SF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNS <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">79 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not sign (SF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNS <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 89 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not sign (SF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNS <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 89 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not sign (SF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JP <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7A <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if parity (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JP <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8A <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if parity (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JP <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8A <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if parity (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JPE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7A <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if parity even (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JPE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8A <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if parity even (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JPE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8A <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if parity even (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNP <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7B <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not parity (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNP <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8B <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not parity (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNP <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8B <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not parity (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JPO <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7B <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if parity odd (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JPO <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8B <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if parity odd (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JPO <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8B <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if parity odd (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JL <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7C <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if less (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JL <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8C <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if less (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JL <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8C <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if less (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNGE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7C <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not greater or equal (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNGE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8C <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not greater or equal (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNGE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8C <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not greater or equal (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNL <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7D <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not less (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNL <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8D <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not less (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNL <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8D <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not less (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JGE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7D <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if greater or equal (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JGE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8D <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if greater or equal (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JGE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8D <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if greater or equal (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JLE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7E <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if less or equal (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JLE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8R <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if less or equal (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JLE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8R <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if less or equal (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNG <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7E <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not greater (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNG <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8E <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not greater (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNG <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8E <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not greater (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNLE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7F <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not less or equal (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNLE <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8F <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not less or equal (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JNLE <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8F <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if not less or equal (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JG <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">7F <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if greater (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JG <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8F <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if greater (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JG <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 8F <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump if greater (ZF = 0 or SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JCXZ <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E3 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump short if the 16-bit count register (CX) is zero.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JCXZ <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E3 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump short if the 32-bit count register (ECX) is zero.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JCXZ <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E3 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Jump short if the 32-bit count register (RCX) is zero.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">EB <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Short jump with the target specified by an 8-bit signed displacement.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP <i>rel16off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E9 <i>cw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Short jump with the target specified by a 16-bit signed displacement.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP <i>rel32off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E9 <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Short jump with the target specified by a 32-bit signed displacement.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near jump with the target specified <i>reg/mem16</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near jump with the target specified <i>reg/mem32</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near jump with the target specified <i>reg/mem64</i>.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP FAR <i>pntr16:16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">EA <i>cd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far jump direct, with the target specified by a far pointer contained in the instruction.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP FAR <i>pntr16:32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">EA <i>cp</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far jump direct, with the target specified by a far pointer contained in the instruction.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP FAR <i>mem16:16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far jump indirect, with the target specified by a far pointer in memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">JMP FAR <i>mem16:32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far jump indirect, with the target specified by a far pointer in memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LAHF</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load the SF, ZF, AF, PF, and CF flags into the AH register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LDS <i>reg16</i>,<i>mem16:16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C5 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load DS:reg16 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LDS <i>reg32</i>,<i>mem16:32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C5 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load DS:reg32 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LES <i>reg16</i>,<i>mem16:16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C4 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load ES:reg16 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LES <i>reg32</i>,<i>mem16:32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C4 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load ES:reg32 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LFS <i>reg16</i>,<i>mem16:16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B4 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load FS:reg16 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LFS <i>reg32</i>,<i>mem16:32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B4 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load FS:reg32 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LGS <i>reg16</i>,<i>mem16:16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B5 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load GS:reg16 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LGS <i>reg32</i>,<i>mem16:32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B5 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load GS:reg32 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LSS <i>reg16</i>,<i>mem16:16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B2 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load SS:reg16 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LSS <i>reg32</i>,<i>mem16:32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B2 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load SS:reg32 with a far pointer from memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LEA <i>reg16</i>,<i>mem</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8D /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store effective address in a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LEA <i>reg32</i>,<i>mem</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8D /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store effective address in a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LEA <i>reg64</i>,<i>mem</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8D /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store effective address in a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LEAVE</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C9</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set the stack pointer SP to the value in the BP register and pop BP.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-156.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LEAVE</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C9</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set the stack pointer ESP to the value in the EBP register and pop EBP.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-156.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LEAVE</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C9</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set the stack pointer RSP to the value in the RBP register and pop RBP.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-156.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LFENCE</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AE E8</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Force strong ordering of (serialize) load operations.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LODS <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AC</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load byte at DS:rSI into AL and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LODS <i>mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AD</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load word at DS:rSI into AX and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LODS <i>mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AD</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load doubleword at DS:rSI into EAX and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LODS <i>mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AD</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load quadword at DS:rSI into RAX and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LODSB</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AC</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load byte at DS:rSI into AL and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LODSW</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AD</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load word at DS:rSI into AX and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LODSD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AD</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load doubleword at DS:rSI into EAX and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LODSQ</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AD</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Load quadword at DS:rSI into RAX and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LOOP <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E2 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement rCX and then jump short if rCX is not 0.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LOOPE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E1 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement rCX and then jump short if rCX is not 0 and ZF is 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LOOPNE <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E0 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement rCX and then jump short if rCX is not 0 and ZF is 0.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LOOPNZ <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E0 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement rCX and then jump short if rCX is not 0 and ZF is 0.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">LOOPZ <i>rel8off</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E1 <i>cb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Decrement rCX and then jump short if rCX is not 0 and ZF is 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MFENCE</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AE F0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Force strong ordering of (serialized) load and store operations.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">88 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of an 8-bit register to an 8-bit destination register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">89 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 16-bit register to a 16-bit destination register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">89 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 32-bit register to a 32-bit destination register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">89 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 64-bit register to a 64-bit destination register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg8</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8A /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of an 8-bit register or memory operand to an 8-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 16-bit register or memory operand to a 16-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 32-bit register or memory operand to a 32-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 64-bit register or memory operand to a 64-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg16/32/64/mem16</i>,<i>segReg</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8C /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a segment register to a 16-bit, 32-bit, or 64-bit destination register or to a 16-bit memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>segReg</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8E /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 16-bit register or memory operand to a segment register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV AL,<i>moffset8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 8-bit data at a specified memory offset to the AL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV AX,<i>moffset16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 16-bit data at a specified memory offset to the AX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV EAX,<i>moffset32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 32-bit data at a specified memory offset to the EAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV RAX,<i>moffset64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 64-bit data at a specified memory offset to the RAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>moffset8</i>,AL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of the AL register to an 8-bit memory offset.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>moffset16</i>,AX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of the AX register to a 16-bit memory offset.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>moffset32</i>,EAX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of the EAX register to a 32-bit memory offset.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>moffset64</i>,RAX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of the RAX register to a 64-bit memory offset.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">B0 <i>+rb</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move an 8-bit immediate value into an 8-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">B8 <i>+rw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move a 16-bit immediate value into a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">B8 <i>+rd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move a 32-bit immediate value into a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg64</i>,<i>imm64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">B8 <i>+rq</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move a 64-bit immediate value into a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C6 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move an 8-bit immediate value to an 8-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg/mem16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C7 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move a 16-bit immediate value to a 16-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg/mem32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C7 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move a 32-bit immediate value to a 32-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOV <i>reg/mem64</i>,<i>imm64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C7 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move a 64-bit immediate value to a 64-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVD <i>xmm</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">66 0F 6E /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 32-bit value from a general-purpose register or 32-bit memory location to an XMM register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVD <i>xmm</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">66 0F 6E /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 64-bit value from a general-purpose register or 64-bit memory location to an XMM register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVD <i>reg/mem32</i>,<i>xmm</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">66 0F 7E /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 32-bit value from an XMM register to a 32-bit general-purpose register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVD <i>reg/mem64</i>,<i>xmm</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">66 0F 7E /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 64-bit value from an XMM register to a 64-bit general-purpose register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVD <i>mmx</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 6E /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 32-bit value from a general-purpose register or 32-bit memory location to an MMX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVD <i>mmx</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 6E /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 64-bit value from a general-purpose register or 64-bit memory location to an MMX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVD <i>reg/mem32</i>,<i>mmx</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 7E /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 32-bit value from an MMX register to a 32-bit general-purpose register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVD <i>reg/mem64</i>,<i>mmx</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 7E /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move 64-bit value from an MMX register to a 64-bit general-purpose register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVMSKPD <i>reg32</i>,<i>xmm</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">66 0F 50 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move sign bits 127 and 63 in an XMM register t0 a 32-bit general purpose-register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVMSKPS <i>reg32</i>,<i>xmm</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 50 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move sign bits 127, 95, 63, 31 in an XMM register to a 32-bit general-purpose register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVNTI <i>mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F C3 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Stores a 32-bit general-purpose register value into a 32-bit memory location, minimizing cache pollution.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVNTI <i>mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F C3 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Stores a 64-bit general-purpose register value into a 64-bit memory location, minimizing cache pollution.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVS <i>mem8</i>,<i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move byte at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVS <i>mem16</i>,<i>mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move word at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVS <i>mem32</i>,<i>mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move doubleword at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVS <i>mem64</i>,<i>mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move quadword at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSB</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move byte at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSW</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move word at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move doubleword at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSQ</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move quadword at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSX <i>reg16</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BE /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of an 8-bit register or memory location to a 16-bit register with sign extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSX <i>reg32</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BE /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of an 8-bit register or memory location to a 32-bit register with sign extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSX <i>reg64</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BE /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of an 8-bit register or memory location to a 64-bit register with sign extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSX <i>reg32</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BF /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 16-bit register or memory location to a 32-bit register with sign extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSX <i>reg64</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F BF /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 16-bit register or memory location to a 64-bit register with sign extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVSXD <i>reg64</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">63 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 32-bit register or memory operand to a 64-bit register with sign extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVZX <i>reg16</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B6 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of an 8-bit register or memory operand to a 16-bit register with zero-extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVZX <i>reg32</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B6 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of an 8-bit register or memory operand to a 32-bit register with zero-extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVZX <i>reg64</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B6 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of an 8-bit register or memory operand to a 64-bit register with zero-extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVZX <i>reg32</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B7 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 16-bit register or memory operand to a 32-bit register with zero-extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MOVZX <i>reg64</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F B7 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move the contents of a 16-bit register or memory operand to a 64-bit register with zero-extension.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MUL <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F6 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiplies an 8-bit register or memory operand by the contents of the AL register and stores the result in the AX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MUL <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiplies a 16-bit register or memory operand by the contents of the AX register and stores the result in the DX:AX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MUL <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiplies a 32-bit register or memory operand by the contents of the EAX register and stores the result in the EDX:EAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">MUL <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Multiplies a 64-bit register or memory operand by the contents of the RAX register and stores the result in the RDX:RAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">NEG <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F6 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Performs a tow&#8217;s complement negation on an 8-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">NEG <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Performs a tow&#8217;s complement negation on a 16-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">NEG <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Performs a tow&#8217;s complement negation on a 32-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">NEG <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Performs a tow&#8217;s complement negation on a 64-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">NOP</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">90</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Performs no operation.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">NOT <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F6 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Complements the bits in an 8-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">NOT <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Complements the bits in a 16-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">NOT <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Complements the bits in a 32-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">NOT <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Complements the bits in a 64-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0C <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of AL with an immediate 8-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR AX,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0D <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of AX with an immediate 16-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR EAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0D <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of EAX with an immediate 32-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR RAX,<i>imm64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0D <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of RAX with an immediate 64-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 /1 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of an 8-bit register or memory operand and an immediate 8-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /1 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 16-bit register or memory operand and an immediate 16-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /1 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 32-bit register or memory operand and an immediate 32-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem64</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /1 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 64-bit register or memory operand and a sign-extended immediate 32-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /1 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 16-bit register or memory operand and a sign-extended immediate 8-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /1 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 32-bit register or memory operand and a sign-extended immediate 8-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /1 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 64-bit register or memory operand and a sign-extended immediate 8-bit value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">08 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of an 8-bit register or memory operand with the contents of an 8-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">09 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 16-bit register or memory operand with the contents of a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">09 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 32-bit register or memory operand with the contents of a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">09 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 64-bit register or memory operand with the contents of a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg8</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0A /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of an 8-bit register with the contents of an 8-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 16-bit register with the contents of a 16-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 32-bit register with the contents of a 32-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OR <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">OR the contents of a 64-bit register with the contents of a 64-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUT <i>imm8</i>,AL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E6 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the byte in the AL register to the port specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUT <i>imm8</i>,AX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the word in the AX register to the port specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUT <i>imm8</i>,EAX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">E7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the doubleword in the EAX register to the port specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUT DX,AL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">EE</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the byte in the AL register to the output port specified in DX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUT DX,AX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">EE</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the word in the AX register to the output port specified in DX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUT DX,EAX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">EE</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the doubleword in the EAX register to the output port specified in DX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUTS DX,<i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6E</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the byte in DS:rSI to the port specified in DX, and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUTS DX,<i>mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the word in DS:rSI to the port specified in DX, and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUTS DX,<i>mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the doubleword in DS:rSI to the port specified in DX, and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUTSB</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6E</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the byte in DS:rSI to the port specified in DX, and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUTSW</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the word in DS:rSI to the port specified in DX, and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">OUTSD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Output the doubleword in DS:rSI to the port specified in DX, and then increment or decrement rSI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8F /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into a 16-bit register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8F /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into a 32-bit register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">8F /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into a 64-bit register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP <i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">58 <i>+rw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP <i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">58 <i>+rd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP <i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">58 <i>+rq</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into a 64-bit register.</font></p>
</td>
<td valign="top" width="67">&#160;
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP DS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into the DS register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP ES</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">07</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into the ES register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP SS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">17</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into the SS register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP FS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into the FS register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POP GS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A9</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the top of the stack into the GS register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POPA</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">61</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the DI, SI, BP, SP, BX, DX, CX, and AX registers.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POPAD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">61</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop the EDI, ESI, EBP, ESP, EBX, EDX, ECX, and EAX registers.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POPF</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9D</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop a word from the stack into the FLAGS register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POPFD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9D</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop a doubleword from the stack into the EFLAGS register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">POPFQ</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9D</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Pop a quadword from the stack into the RFLAGS register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PREFETCH <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 0D /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Prefetch processor cache line into L1 data cache.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PREFETCHW <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 0D /1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Prefetch processor cache line into L1 data cache and mark it modified.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PREFETCHNTA <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 18 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move data closer to the processor using the NTA reference.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PREFETCHT0 <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 18 /1</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move data closer to the processor using the T0 reference.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PREFETCHT1 <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 18 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move data closer to the processor using the T1 reference.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PREFETCHT2 <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 18 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Move data closer to the processor using the T2 reference.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /6</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the contents of a 16-bit register or memory operand onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /6</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the contents of a 32-bit register or memory operand onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FF /6</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the contents of a 64-bit register or memory operand onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">50 <i>+rw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the contents of a 16-bit register onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">50 <i>+rd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the contents of a 32-bit register onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">50 <i>+rq</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the contents of a 64-bit register onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">6A</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push an 8-bit immediate value (sign-extended to 16, 32, or 64 bits) onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">68</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push a 16-=bit immediate value onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">68</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the contents of a 32-bit register onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH <i>imm64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">68</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the contents of a 64-bit register onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH CS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0E</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the CS selector onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH SS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">16</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the SS selector onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH DS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1E</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the DS selector onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH ES</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">06</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the ES selector onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH FS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the FS selector onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSH GS</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A8</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the GS selector onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSHF</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9C</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the FLAGS word onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSHFD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9C</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the EFLAGS word onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">PUSHFQ</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9C</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Push the RFLAGS word onto the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem8</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D0 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem8</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D2 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C0 /2 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /2 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem32</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /2 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem64</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem64</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /2</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /2 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem8</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D0 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem8</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D2 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C0 /3 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /3 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem32</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /3 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCL <i>reg/mem64</i>,1</font></p>
<p><font face="Courier" size="-1">RCR</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem64</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RCR <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /3 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RET</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C3</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near return to the calling procedure.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RET <i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C2 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Near return to the calling procedure and then pop of the specified number of bytes from the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RETF</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">CB</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far return to the calling procedure.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">RETF <i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">CA <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Far return to the calling procedure and then pop of the specified number of bytes from the stack.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/imm8</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D0 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate an 8-bit register or memory operand left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/mem8</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D2 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate an 8-bit register or memory operand left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C0 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate an 8-bit register or memory operand left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/imm16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 16-bit register or memory operand left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/mem16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 16-bit register or memory operand left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 16-bit register or memory operand left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/imm32</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 32-bit register or memory operand left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/mem32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 32-bit register or memory operand left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 32-bit register or memory operand left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/imm64</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 64-bit register or memory operand left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/mem64</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 64-bit register or memory operand left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROL <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 64-bit register or memory operand left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/imm8</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D0 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate an 8-bit register or memory operand right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/mem8</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D2 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate an 8-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C0 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate an 8-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/imm16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 16-bit register or memory operand left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/mem16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 16-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 16-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/imm32</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 32-bit register or memory operand left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/mem32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 32-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 32-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/imm64</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 64-bit register or memory operand right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/mem64</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /0</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 64-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">ROR <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Rotate a 64-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAHF</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">9E</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Loads the sign flag, the zero flag, the auxiliary flag, the parity flag, and the carry flag from the AH register into the lower 8 bits of the EFLAGS register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem8</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D0 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem8</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D2 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C0 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem32</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem64</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem64</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAL <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem8</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D0 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem8</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D2 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C0 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem32</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem64</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem64</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem8</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D0 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 8-bit register or memory operand right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem8</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D2 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 8-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C0 /7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 8-bit register or memory location right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 16-bit register or memory operand right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 16-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 16-bit register or memory location right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem32</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 32-bit register or memory location right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 32-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 32-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem64</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 64-bit register or memory operand left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem64</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 64-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SAR <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /7 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a signed 64-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1C <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 8-bit value from the AL register with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB AX,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1D <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 16-bit value from the AX register with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB EAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1D <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 32-bit value from the EAX register with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB RAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1D <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 32-bit value from the RAX register with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 /3 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 8-bit value from an 8-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 /3 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 16-bit value from a 16-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /3 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 32-bit value from a 32-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem64</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /3 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract a sign-extended immediate 32-bit value from a 64-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /3 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract a sign-extended 8-bit immediate value from a 16-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /3 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract a sign-extended 8-bit immediate value from a 32-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /3 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract a sign-extended 8-bit immediate value from a 64-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">18 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of an 8-bit register from an 8-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">19 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 16-bit register from a 16-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">19 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 32-bit register from a 32-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">19 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 64-bit register from a 64-bit register or memory location with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg8</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1A /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of an 8-bit register or memory location from the contents of an 8-bit register with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 16-bit register or memory location from the contents of a 16-bit register with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 32-bit register or memory location from the contents of a 32-bit register with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SBB <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">1B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 64-bit register or memory location from the contents of a 64-bit register with borrow.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SCAS <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AE</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of the AL register with the byte at ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SCAS <i>mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AF</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of the AX register with the word at ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SCAS <i>mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AF</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of the EAX register with the doubleword at ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SCAS <i>mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AF</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of the RAX register with the quadword at ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SCASB</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AE</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of the AL register with the byte at ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SCASW</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AF</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of the AX register with the word at ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SCASD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AF</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of the EAX register with the doubleword at ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SCASQ</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AF</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Compare the contents of the RAX register with the quadword at ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETO <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 90</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if overflow (OF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNO <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 91</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not overflow (OF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETB <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 92</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if below (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETC <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 92</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if carry (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNAE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 92</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not above or equal (CF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNB <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 93</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not below (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNC <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 93</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not carry (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETAE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 93</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if above or equal (CF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETZ <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 94</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if zero (ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 94</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if equal (ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNZ <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 95</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not zero (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 95</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not equal (ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETBE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 96</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if below or equal (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNA <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 96</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not above (CF = 1 or ZF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNBE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 97</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not below or equal (CF = 0 and ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETA <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 97</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if above (CF = 0 and ZF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETS <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 98</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if sign (SF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNS <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 99</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not sign (SF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETP <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9A</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if parity (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETPE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9A</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if parity even (PF = 1).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNP <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9B</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not parity (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETPO <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9B</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if parity odd (PF = 0).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETL <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9C</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if less (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNGE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9C</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not greater or equal (SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNL <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9D</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not less (SF =OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETGE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9D</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if greater or equal (SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETLE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9E</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if less or equal (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNG <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9E</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not greater (ZF = 1 or SF &lt;&gt; OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETNLE <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if not less or equal (ZF = 0 and SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SETG <i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F 9F</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set byte if greater (ZF = 0 and SF = OF).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SFENCE</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AE F8</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Force strong ordering of (serialized) store operations.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem8</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D0 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem8</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D2 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C0 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem32</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem64</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory location left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem64</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /4</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory location left the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHL <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /4 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory location left the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHLD <i>reg/mem16</i>,<i>reg16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A4 /r <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 16-bit destination register or memory operand to the left the number of bits specified in an 8-bit immediate value, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHLD <i>reg/mem16</i>,<i>reg16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A5 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 16-bit destination register or memory operand to the left the number of bits specified in the CL register, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHLD <i>reg/mem32</i>,<i>reg32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A4 /r <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 32-bit destination register or memory operand to the left the number of bits specified in an 8-bit immediate value, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHLD <i>reg/me326</i>,<i>reg32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A5 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 32-bit destination register or memory operand to the left the number of bits specified in the CL register, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHLD <i>reg/mem64</i>,<i>reg64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A4 /r <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 64-bit destination register or memory operand to the left the number of bits specified in an 8-bit immediate value, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHLD <i>reg/mem16</i>,<i>reg16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F A5 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 64-bit destination register or memory operand to the left the number of bits specified in the CL register, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem8</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D0 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory operand right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem8</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D2 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C0 /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift an 8-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem16</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory operand right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 16-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem32</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory operand right 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 32-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem64</i>,1</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D1 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory operand left 1 bit.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem64</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D3 /5</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory operand right the number of bits specified in the CL register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHR <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">C1 /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift a 64-bit register or memory operand right the number of bits specified by an 8-bit immediate value.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHRD <i>reg/mem16</i>,<i>reg16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AC /r <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 16-bit destination register or memory operand to the right the number of bits specified in an 8-bit immediate value, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHRD <i>reg/mem16</i>,<i>reg16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AD /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 16-bit destination register or memory operand to the right the number of bits specified in the CL register, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHRD <i>reg/mem32</i>,<i>reg32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AC /r <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 32-bit destination register or memory operand to the right the number of bits specified in an 8-bit immediate value, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHRD <i>reg/me326</i>,<i>reg32</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AD /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 32-bit destination register or memory operand to the right the number of bits specified in the CL register, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHRD <i>reg/mem64</i>,<i>reg64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AC /r <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 64-bit destination register or memory operand to the right the number of bits specified in an 8-bit immediate value, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SHRD <i>reg/mem16</i>,<i>reg16</i>,CL</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F AD /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Shift bits of a 64-bit destination register or memory operand to the right the number of bits specified in the CL register, while shifting in bits from the second operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STC</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F9</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set the carry flag (CF) to 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">FD</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set the direction flag (DF) to 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STOS <i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AA</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store the contents of the AL register to ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STOS <i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AB</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store the contents of the AX register to ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STOS <i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AB</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store the contents of the EAX register to ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STOS <i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AB</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store the contents of the RAX register to ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STOSB</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AA</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store the contents of the AL register to ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STOSW</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AB</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store the contents of the AX register to ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STOSD</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AB</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store the contents of the EAX register to ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">STOSQ</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AB</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Store the contents of the RAX register to ES:rDI, and then increment or decrement rDI.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">2C <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 8-bit value from the AL register and store the result in AL.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB AX,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">2D <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 16-bit value from the AX register and store the result in AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB EAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">2D <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 32-bit value from the EAX register and store the result in EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB RAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">2D <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract a sign-extended immediate 32-bit value from the RAX register and store the result in RAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 8-bit value from an 8-bit destination register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /5 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 16-bit value from a 16-bit destination register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /5 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract an immediate 32-bit value from a 32-bit destination register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem64</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /5 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract a sign-extended immediate 32-bit value from a 64-bit destination register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract a sign-extended immediate 8-bit value from a 16-bit register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract a sign-extended immediate 8-bit value from a 32-bit register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /5 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract a sign-extended immediate 8-bit value from a 64-bit register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">28 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of an 8-bit register from an 8-bit destination register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">29 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 16-bit register from a 16-bit destination register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">29 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 32-bit register from a 32-bit destination register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">29 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 64-bit register from a 64-bit destination register or memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg8</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">2A /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of an 8-bit register or memory operand from an 8-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">2B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 16-bit register or memory operand from a 16-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">2B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 32-bit register or memory operand from a 32-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">SUB <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">2B /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Subtract the contents of a 64-bit register or memory operand from a 64-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">AB <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND an immediate 8-bit value with the contents of the AL register and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST AX,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A9 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND an immediate 16-bit value with the contents of the AX register and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST EAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A9 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND an immediate 32-bit value with the contents of the EAX register and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST RAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">A9 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND a sign-extened immediate 32-bit value with the contents of the RAX register and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F6 /0 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND an immediate 8-bit value with the contents of an 8-bit register or memory operand and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST <i>reg/mem16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /0 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND an immediate 16-bit value with the contents of a 16-bit register or memory operand and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST <i>reg/mem32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /0 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND an immediate 32-bit value with the contents of a 32-bit register or memory operand and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST <i>reg/mem64</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">F7 /0 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND a sign-extened immediate 32-bit value with the contents of a 64-bit register or memory operand and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">84 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of an 8-bit register with the contents of an 8-bit register or memory operand and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">85 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of a 16-bit register with the contents of a 16-bit register or memory operand and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">85 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of a 32-bit register with the contents of a 32-bit register or memory operand and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">TEST <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">85 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">AND the contents of a 64-bit register with the contents of a 64-bit register or memory operand and set rFLAGS to reflect the result.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XADD <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F C0 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of an 8-bit register with the contents of 8-bit destination register or memory operand and load their sum into the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XADD <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F C1 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 16-bit register with the contents of 16-bit destination register or memory operand and load their sum into the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XADD <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F C1 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 32-bit register with the contents of 32-bit destination register or memory operand and load their sum into the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XADD <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">0F C1 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 64-bit register with the contents of 64-bit destination register or memory operand and load their sum into the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG AX,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">90 <i>+rw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of AX register with the contents of a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg16</i>,AX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">90 <i>+rw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 16-bit register with the contents of the AX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG AX,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">90 <i>+rd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of EAX register with the contents of a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg32</i>,AX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">90 <i>+rd</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 32-bit register with the contents of the EAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG RAX,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">90 <i>+rq</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of RAX register with the contents of a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg64</i>,RAX</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">90 <i>+rq</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 64-bit register with the contents of the RAX register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">86 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of an 8-bit register with the contents of an 8-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg8</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">86 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of an 8-bit register or memory operand with the contents of an 8-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">87 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 16-bit register with the contents of a 16-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">87 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 16-bit register or memory operand with the contents of a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">87 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 32-bit register with the contents of a 32-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">87 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 32-bit register or memory operand with the contents of a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">87 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 64-bit register with the contents of a 64-bit register or memory operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XCHG <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">87 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Exchange the contents of a 64-bit register or memory operand with the contents of a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XLAT <i>mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set AL to the contents of DS:[rBX + unsigned AL].</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XLATB</font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">D7</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">Set AL to the contents of DS:[rBX + unsigned AL].</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR AL,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">34 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of AL with an immediate 8-bit operand and store the result in AL.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR AX,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">35 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of AX with an immediate 16-bit operand and store the result in AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR EAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">35 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of EAX with an immediate 32-bit operand and store the result in EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR RAX,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">35 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of RAX with a sign-extended immediate 32-bit operand and store the result in AX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem8</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">80 /6 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of an 8-bit destination register or memory operand with an 8-bit immediate value and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem16</i>,<i>imm16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /6 <i>iw</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 16-bit destination register or memory operand with a 16-bit immediate value and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem32</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /6 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 32-bit destination register or memory operand with a 32-bit immediate value and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem64</i>,<i>imm32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">81 /6 <i>id</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 64-bit destination register or memory operand with a sign-extended 32-bit immediate value and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem16</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /6 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 16-bit destination register or memory operand with a sign-extended 8-bit immediate value and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem32</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /6 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 32-bit destination register or memory operand with a sign-extended 8-bit immediate value and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem64</i>,<i>imm8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">83 /6 <i>ib</i></font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 64-bit destination register or memory operand with a sign-extended 8-bit immediate value and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem8</i>,<i>reg8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">30 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of an 8-bit destination register or memory operand with the contents of an 8-bit register and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">31 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 16-bit destination register or memory operand with the contents of a 16-bit register and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem32</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">31 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 32-bit destination register or memory operand with the contents of a 32-bit register and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg/mem64</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">31 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 64-bit destination register or memory operand with the contents of a 64-bit register and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg8</i>,<i>reg/mem8</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">32 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of an 8-bit destination register with the contents of an 8-bit register or memory operand and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">33 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 16-bit destination register with the contents of a 16-bit register or memory operand and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg32</i>,<i>reg/mem32</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">33 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 32-bit destination register with the contents of a 32-bit register or memory operand and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="196"><p><font face="Courier" size="-1">XOR <i>reg64</i>,<i>reg/mem64</i></font></p>
</td>
<td valign="top" width="97"><p><font face="Courier" size="-1">33 /r</font></p>
</td>
<td valign="top" width="252"><p><font face="Courier" size="-1">XOR the contents of a 64-bit destination register with the contents of a 64-bit register or memory operand and store the result in the destination.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr></table></center></ul>

  <ul><p align="center"><font face="Times New Roman"><b><a name="P9200_369568"></a>Table 15-8: General-Purpose Instruction Reference</b></font></p>

      <ul><ul><p><b><font face="Arial" size="+1"><a name="P9201_369617"></a>1.6.3 System Instructions</font></b></p>

</ul></ul><p><font face="Times New Roman">This chapter describes the function, mnemonic syntax and opcodes that the simulator simulates. The system instructions are used to establish the operating mode, access processor resources, handle program and system errors, and manage memory. Many of these instructions can only be executed by privileged software, such as the operating system kernel and interrupt handlers, that run at the highest privilege level. Only system instructions can access certain processor resources, such as the control registers, model-specific register, and debug registers.</font></p></ul>
<p><ul>
<center><table border="1">
<tr>
<td width="148"></td>
<td width="72"></td>
<td width="300"></td>
<td width="67"></td></tr>
<tr>
<td colspan="3" bgcolor="#e6e6e6" valign="top" width="521"><p align="center"><font face="Times New Roman" size="-1"><b>Instruction</b></font></p>
</td>
<td rowspan="2" bgcolor="#e6e6e6" valign="top" width="67"><p align="center"><b><font face="Times New Roman" size="-1">Supported</font></b></p>
</td></tr>
<tr>
<td bgcolor="#e6e6e6" valign="top" width="148"><p align="center"><b><font face="Times New Roman" size="-1">Mnemonic</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="72"><p align="center"><b><font face="Times New Roman" size="-1">Opcode</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="300"><p align="center"><b><font face="Times New Roman" size="-1">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">ARPL <i>reg/mem16</i>,<i>reg16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">63 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Adjust the RPL of a destination segment selector to a level not less than the RPL of the segment selector specifies in the 16-bit source register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><font face="Times New Roman" size="-1"><sup><a href="#P9217_370414" name="P9217_370415"><img src="images/help-2.gif" border="0" width="16" height="15">7</a></sup></font></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">CLI</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">FA</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Clear the interrupt flag (IF) to zero.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">CLTS</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 06</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Clear the task-switched (TS) flag in CR0 to 0.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">HLT</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">F4</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Halt instruction execution.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">INT 3</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">CC</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Trap to debugger at interrupt 3.</font></p>
</td>
<td valign="top" width="67"><p align="center"><font face="Times New Roman" size="-1"><sup><a href="#P9234_370656" name="P9234_370657"><img src="images/help-156.gif" border="0" width="16" height="15">8</a></sup></font></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">INVD</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 08</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Flush internal caches and trigger external cache flushes.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">INVLPG <i>mem8</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /7</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Invalidate the TLB entry for the page containing a specified memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">IRET</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">CF</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Return from interrupt (16-bit operand size).</font></p>
</td>
<td valign="top" width="67"><p align="center"><font face="Times New Roman"><img src="images/help-156.gif" border="0" width="16" height="15"> <a href="#P9250_370992"><sup>3</sup></a></font></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">IRETD</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">CF</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Return from interrupt (32-bit operand size).</font></p>
</td>
<td valign="top" width="67"><p align="center"><font face="Times New Roman" size="-1"><sup><a href="#P9251_370992" name="P9250_370992"><img src="images/help-156.gif" border="0" width="16" height="15">9</a></sup></font></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">IRETQ</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">CF</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Return from interrupt (64-bit operand size).</font></p>
</td>
<td valign="top" width="67"><p align="center"><font face="Times New Roman"><img src="images/help-156.gif" border="0" width="16" height="15"> <a href="#P9250_370992"><sup>3</sup></a></font></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LAR <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 02 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Reads the GDT/LDT descriptor referenced by the 16-bit source operand masks the attributes with FF00h and saves the result in the 16-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LAR <i>reg32</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 02 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Reads the GDT/LDT descriptor referenced by the 16-bit source operand masks the attributes with 00FFFF00h and saves the result in the 32-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LAR <i>reg64</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 02 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Reads the GDT/LDT descriptor referenced by the 16-bit source operand, masks the attributes with 00FFFF00h and saves the result in the 64-bit destination register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LGDT <i>mem16:32</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /2</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Loads <i>mem16:32</i> into the global descriptor table register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LGDT <i>mem16:64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /2</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Loads <i>mem16:64</i> into the global descriptor table register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LIDT <i>mem16:32</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /3</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Loads <i>mem16:32</i> into the interrupt descriptor table register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LIDT <i>mem16:64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /3</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Loads <i>mem16:64</i> into the interrupt descriptor table register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LLDT r<i>eg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /2</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Load the 16-bit segment selector into the local descriptor table register and load the LDT descriptor from the GDT.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LMSW <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /6</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Loads the lower 4 bits of the source into the lower 4 bits of CR0.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LSL <i>reg16</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 03 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Loads a 16-bit general-purpose register with the segment limit or a selector specified in a 16-bit memory or register operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LSL <i>reg32</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 03 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Loads a 32-bit general-purpose register with the segment limit or a selector specified in a 16-bit memory or register operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LSL <i>reg64</i>,<i>reg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 03 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Loads a 64-bit general-purpose register with the segment limit or a selector specified in a 16-bit memory or register operand.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">LTR <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /3</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Load the 16-bit segment selector into the task register and load the TSS descriptor from the GDT.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">MOV <i>CRn</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 22 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Move the contents of a 32-bit register to CR<i>n.</i></font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">MOV <i>CRn</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 22 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Move the contents of a 64-bit register to CR<i>n.</i></font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">MOV <i>reg32</i>,<i>CRn</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 20 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Move the contents of CR<i>n</i> to a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">MOV <i>reg64</i>,<i>CRn</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 20 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Move the contents of CR<i>n</i> to a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">MOV <i>DRn</i>,<i>reg32</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 21 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Move the contents of a 32-bit register to DR<i>n.</i></font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">MOV <i>DRn</i>,<i>reg64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 21 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Move the contents of a 64-bit register to DR<i>n.</i></font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">MOV <i>reg32</i>,<i>DRn</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 23 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Move the contents of DR<i>n</i> to a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">MOV <i>reg64</i>,<i>DRn</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 23 /r</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Move the contents of DR<i>n</i> to a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">RDMSR</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 32</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Copy MSR specified by ECX into EDX:EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">RDPMC</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 33</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Copy the performance monitor counter specified by ECX into EDX:EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">RDTSC</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 31</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Copy the time-stamp counter into EDX:EAX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">RSM</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F AA</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Resume operation of an interrupted program.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SGDT <i>mem16:32</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /0</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store global descriptor table register to memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SGDT <i>mem16:64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /0</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store global descriptor table register to memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SIDT <i>mem16:32</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /1</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store interrupt descriptor table register to memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SIDT <i>mem16:64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /1</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store interrupt descriptor table register to memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SLDT <i>reg16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /0</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the segment selector from the local descriptor table register to a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SLDT <i>reg32</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /0</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the segment selector from the local descriptor table register to a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SLDT <i>reg64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /0</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the segment selector from the local descriptor table register to a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SLDT <i>mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /0</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the segment selector from the local descriptor table register to a 16-bit memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SMSW <i>reg16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /4</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the low 16 bits of CR0 to a 16-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SMSW <i>reg32</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /4</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the low 32 bits of CR0 to a 32-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SMSW <i>reg64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /4</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the entire 64 bits of CR0 to a 64-bit register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SMSW <i>mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 /4</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the low 16 bits of CR0 to memory.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">STI</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">FB</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Set interrupt flag (IF) to 1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">STR <i>reg16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /1</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the segment selector from the task register to a 16-bit general-purpose register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">STR <i>reg32</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /1</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the segment selector from the task register to a 32-bit general-purpose register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">STR <i>reg64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /1</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the segment selector from the task register to a 64-bit general-purpose register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">STR <i>mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /1</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Store the segment selector from the task register to a 16-bit memory location.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SWAPGS</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 01 F8</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Exchange GS base with KernelGSBase MSR.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SYSCALL</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 05</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Call operating system.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SYSENTER</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 34</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Call operating system.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SYSEXIT</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 35</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Return from operating system.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">SYSRET</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 07</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Return from operating system.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">UD2</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 08</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Raise an invalid opcode exception.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">VERR <i>reg/mem16</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /4</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Set the zero flag (ZF) to 1 if the segment selected can be read.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">VERW</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 00 /5</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Set the zero flag (ZF) to 1 if the segment selected can be written.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">WBINVD</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 09</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Write modified cache lines to main memory, invalidate internal caches, and trigger external cache flushes.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="148"><p><font face="Courier" size="-1">WRMSR</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 30</font></p>
</td>
<td valign="top" width="300"><p><font face="Courier" size="-1">Write EDX:EAX to the MSR specified by ECX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr></table></center></ul>

  <ul><p align="center"><font face="Times New Roman"><b><a name="P9465_375569"></a>Table 15-9: System Instruction Reference</b></font></p>

<p><a name="P9466_375609"></a><b><font face="Arial">1.6.3.1 INT &#8211; Interrupt to Vector</font></b></p></ul>
<p><ul>
<table border="1">
<tr>
<td bgcolor="#e6e6e6" valign="top" width="67"><p><b><font face="Times New Roman">Opcode</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="127"><p><b><font face="Times New Roman">Instruction</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="385"><p><b><font face="Times New Roman">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="67"><p><font face="Courier">CD</font></p>
</td>
<td valign="top" width="127"><p><font face="Courier">INT <i>imm8</i></font></p>
</td>
<td valign="top" width="385"><p><font face="Times New Roman">Interrupt to Vector<a name="P9473_375701"></a>.</font></p>
</td></tr>
<tr>
<td valign="top" width="67"><p><font face="Courier">CC</font></p>
</td>
<td valign="top" width="127"><p><font face="Courier">INT 3</font></p>
</td>
<td valign="top" width="385"><p><font face="Times New Roman">Interrupt to Debug Vector.</font></p>
</td></tr></table></ul>

    <ul><ul><p><font face="Times New Roman">&#8226; Interrupt to task-gate is not implemented. An attempt to execute an interrupt to task-gate results in a &#8216;<i>FeatureNotImplemented&#8217;</i> exception and the simulation will be stopped.</font></p>

    <p><font face="Times New Roman">&#8226; When delivering an exception in an attempt to deliver a hardware interrupt the simulation will not push the resume-flag (RF) onto the stack.</font></p>

    <p><font face="Times New Roman">&#8226; Always clears VM, NT, TF, and RF bits in rFLAGS.</font></p>

</ul><p><a name="P9482_376112"></a><font face="Arial"><b>1.6.3.2 IRET &#8211; Return from Interrupt</b></font></p></ul>
<p><ul>
<table border="1">
<tr>
<td bgcolor="#e6e6e6" valign="top" width="67"><p><b><font face="Times New Roman">Opcode</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="127"><p><b><font face="Times New Roman">Instruction</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="385"><p><b><font face="Times New Roman">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="67"><p><font face="Courier">CF</font></p>
</td>
<td valign="top" width="127"><p><font face="Courier">IRET, IRETD, IRETQ</font></p>
</td>
<td valign="top" width="385"><p><font face="Times New Roman">Return from interrupt</font></p>
</td></tr></table></ul>

  <ul><p><font face="Times New Roman"><a name="P9492_376219"></a>The simulator does not support nested task-switching using the rFLAGS <i>nested-task</i> <i>bit </i>(NT) and the TSS<a name="P9492_376321"></a> back-link field. An interrupt return (IRET) to the previous task (nested-task) will result in a &#8216;<i>FeatureNotImplemented&#8217;</i> exception and the simulation will be stopped. </font></p>

      <ul><ul><p><font face="Arial" size="+1"><b><a name="P9493_376492"></a>1.6.4 Virtualization Instruction Reference</b></font></p>

</ul></ul><p><font face="Times New Roman">For more information on Virtualization Technology, see AMD Publication #33047, <i>AMD64 Virtualization Technology</i>.</font></p></ul>
<p><ul>
<center><table border="1">
<tr>
<td width="156"></td>
<td width="85"></td>
<td width="268"></td>
<td width="67"></td></tr>
<tr>
<td colspan="3" bgcolor="#e6e6e6" valign="top" width="511"><p align="center"><font face="Times New Roman" size="-1"><b>Instruction</b></font></p>
</td>
<td rowspan="2" bgcolor="#e6e6e6" valign="top" width="67"><p align="center"><b><font face="Times New Roman" size="-1">Supported</font></b></p>
</td></tr>
<tr>
<td bgcolor="#e6e6e6" valign="top" width="156"><p align="center"><b><font face="Times New Roman" size="-1">Mnemonic</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="85"><p align="center"><b><font face="Times New Roman" size="-1">Opcode</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="268"><p align="center"><b><font face="Times New Roman" size="-1">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">CLGI</font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">0F 01 DD</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Clear Global Interrupt Flag.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">INVLPGA</font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">0F 01 DF</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Invalidates the TLB mapping for the virtual page specified in rAX and the ASID specified in ECX.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">MOV <i>reg32</i>,<i>CR8</i></font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">F0 20 /r</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Alternate notation for move from CR8 to register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">MOV <i>reg64</i>,<i>CR8</i></font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">F0 20 /r</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Alternate notation for move register to CR8.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">MOV <i>CR8,reg32</i></font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">F0 22 /r</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Alternate notation for move from CR8 to register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">MOV <i>CR8,reg64</i></font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">F0 22 /r</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Alternate notation for move register to CR8.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">SKINIT</font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">0F 01 DE</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Secure initialization and jump, with attestation.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">STGI</font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">0F 01 DC</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Set Global Interrupt Flag.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">VMLOAD</font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">0F 01 DA</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Load State from VMCB.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">VMCALL</font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">0F 01 D9</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Call VMM.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">VMRUN</font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">0F 01 D8</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Run Virtual Machine.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">VMSAVE</font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">0F 01 DB</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Save State to VMCB.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr></table></center></ul>

      <ul><ul><ul><p><font face="Arial" size="+1"><b><a name="P9554_377336"></a>1.6.5 64-Bit Media Instruction Reference</b></font></p>

</ul></ul><p><font face="Times New Roman">These instructions described in this section operate on data located in the 64-bit MMX registers. Most of the instructions operate in parallel on sets of packed elements called vectors, although some operate on scalars. The instructions define both integer and floating-point operations, and include the legacy MMX instructions and the AMD extensions to the MMX instruction set.</font></p></ul>
<p><ul>
<center><table border="1">
<tr>
<td width="156"></td>
<td width="85"></td>
<td width="268"></td>
<td width="67"></td></tr>
<tr>
<td colspan="3" bgcolor="#e6e6e6" valign="top" width="511"><p align="center"><font face="Times New Roman" size="-1"><b>Instruction</b></font></p>
</td>
<td rowspan="2" bgcolor="#e6e6e6" valign="top" width="67"><p align="center"><b><font face="Times New Roman" size="-1">Supported</font></b></p>
</td></tr>
<tr>
<td bgcolor="#e6e6e6" valign="top" width="156"><p align="center"><b><font face="Times New Roman" size="-1">Mnemonic</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="85"><p align="center"><b><font face="Times New Roman" size="-1">Opcode</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="268"><p align="center"><b><font face="Times New Roman" size="-1">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">CVTPD2PI <i>mmx,xmm2/m128</i></font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">66 0F 2D /r</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Converts packed double-precision floating-point values in an XMM register or 128-bit memory location to packed doubleword integers values in the destination MMX&#8482; register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">CVTPI2PD x<i>mm,mmx/m64</i></font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">66 0F 2A /r</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Converts two packed doubleword integer values in a MMX&#8482; register or 64-bit memory location to two packed double-precision floating-point values in the destination XMM register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="156"><p><font face="Courier" size="-1">CVTPI2PS <i>mmx,xmm2/m128</i></font></p>
</td>
<td valign="top" width="85"><p><font face="Courier" size="-1">0F 2A /r</font></p>
</td>
<td valign="top" width="268"><p><font face="Courier" size="-1">Converts packed doubleword integer values in a MMX&#8482; register or 64-bit memory location to single-precision floating-point values in the destination XMM register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr></table></center></ul>

      <ul><ul><ul><p><font face="Arial" size="+1"><b><a name="P9579_378407"></a>1.6.6 3DNow!&#8482; Instruction Set</b></font></p>

</ul></ul><p><font face="Times New Roman">This chapter describes the 3DNow! <a name="P9580_378472"></a>Instruction Set that the simulator supports and simulates. 3DNow! Technology is a group of new instructions that opens the traditional processing bottlenecks for floating-point-intensive and multimedia applications.</font></p></ul>
<p><ul>
<center><table border="1">
<tr>
<td width="186"></td>
<td width="72"></td>
<td width="248"></td>
<td width="67"></td></tr>
<tr>
<td colspan="3" bgcolor="#e6e6e6" valign="top" width="507"><p align="center"><font face="Times New Roman" size="-1"><b>Instruction</b></font></p>
</td>
<td rowspan="2" bgcolor="#e6e6e6" valign="top" width="67"><p align="center"><b><font face="Times New Roman" size="-1">Supported</font></b></p>
</td></tr>
<tr>
<td bgcolor="#e6e6e6" valign="top" width="186"><p align="center"><b><font face="Times New Roman" size="-1">Mnemonic</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="72"><p align="center"><b><font face="Times New Roman" size="-1">Opcode</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="248"><p align="center"><b><font face="Times New Roman" size="-1">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">FEMMS</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0E</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Fast Enter/Exit of the MMX or floating-point state.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PAVGUSB<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /BF</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Average of unsigned packed 8-bit values.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PF2ID<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /1D</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Converts packed floating-point operand or packed 32-bit integer.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFACC<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /AE</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Floating-point accumulate.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFADD<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /9E</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed, floating-point addition.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFCMPEQ<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /B0</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point comparison, equal to.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFCMPPGE<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /90</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point comparison, greater than or equal to.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFCMPGT<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /A0</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point comparison, greater than.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFMAX<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /A4</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point maximum.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFMIN<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /94</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point minimum.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFMUL<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /B4</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point multiplication.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFRCP<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /96</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point approximation.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFRCPIT1<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /A6</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point reciprocal, first iteration step.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFRCPIT2<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /B6</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point reciprocal, second iteration step.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFRSQIT1<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /A7</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point reciprocal, square root, first iteration step.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFRSQRT<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /97</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point reciprocal, square root approximation.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFSUB<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /9A</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed, floating-point subtraction.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFSUBR<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /AA</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed, floating-point reverse subtraction.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PI2FD<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /0D</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed 32-bit integer to floating-point conversion.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PMULHRW<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /B7</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Multiply signed packed 16-bit values with rounding and store the high 16 bits.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PREFETCH/PREFETCHW</font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0D</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Prefetch processor cache line into L1 data cache (Dcache).</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr></table></center></ul>

  <ul><p align="center"><font face="Times New Roman"><b><a name="P9676_380395"></a>Table 15-10: 3DNow!&#8482; Instruction Reference</b></font></p>

      <ul><ul><p><b><font face="Arial" size="+1"><a name="P9677_380439"></a>1.6.7 Extension to the 3DNow! Instruction Set</font></b></p>

</ul></ul><p><font face="Times New Roman">This section describes the five new DSP instructions added to the 3DNow! Instruction set.</font></p></ul>
<p><ul>
<center><table border="1">
<tr>
<td width="186"></td>
<td width="72"></td>
<td width="248"></td>
<td width="67"></td></tr>
<tr>
<td colspan="3" bgcolor="#e6e6e6" valign="top" width="507"><p align="center"><font face="Times New Roman" size="-1"><b>Instruction</b></font></p>
</td>
<td rowspan="2" bgcolor="#e6e6e6" valign="top" width="67"><p align="center"><b><font face="Times New Roman" size="-1">Supported</font></b></p>
</td></tr>
<tr>
<td bgcolor="#e6e6e6" valign="top" width="186"><p align="center"><b><font face="Times New Roman" size="-1">Mnemonic</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="72"><p align="center"><b><font face="Times New Roman" size="-1">Opcode</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="248"><p align="center"><b><font face="Times New Roman" size="-1">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PF2IW<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /1C</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point to integer word conversion with sign extend.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFNACC<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /8A</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point negative accumulate.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PFPNACC<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /8E</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed floating-point mixed positive-negative accumulate.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PI2FW <i>mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /0C</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed 16-bit integer to floating-point conversion.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="186"><p><font face="Courier" size="-1">PSWAPD<i> mmreg1,mmreg2/m64</i></font></p>
</td>
<td valign="top" width="72"><p><font face="Courier" size="-1">0F 0F /BB</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Packed swap double word.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr></table></center></ul>

  <ul><p align="center"><font face="Times New Roman"><b><a name="P9710_381022"></a>Table 15-11: Extension to 3DNow! Instruction Reference</b></font></p>

      <ul><ul><p><b><font face="Arial" size="+1"><a name="P9711_381076"></a>1.6.8 Prescott New Instructions</font></b></p>

</ul></ul><p><font face="Times New Roman">Prescott New Instruction <a name="P9712_381132"></a>technology for the x64 architecture is a set of 13 new instructions that accelerate performance of Streaming SIMD Extension technology, Streaming SIMD Extension 2 technology, and x87-FP math capabilities. The new technology is compatible with existing software and should run correctly, without modification. The thirteen new instructions are summarized in the following section. For detailed information on each instruction refer to a complete Instruction Set Reference.</font></p></ul>
<p><ul>
<center><table border="1">
<tr>
<td width="168"></td>
<td width="91"></td>
<td width="248"></td>
<td width="67"></td></tr>
<tr>
<td colspan="3" bgcolor="#e6e6e6" valign="top" width="507"><p align="center"><font face="Times New Roman" size="-1"><b>Instruction</b></font></p>
</td>
<td rowspan="2" bgcolor="#e6e6e6" valign="top" width="67"><p align="center"><b><font face="Times New Roman" size="-1">Supported</font></b></p>
</td></tr>
<tr>
<td bgcolor="#e6e6e6" valign="top" width="168"><p align="center"><b><font face="Times New Roman" size="-1">Mnemonic</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="91"><p align="center"><b><font face="Times New Roman" size="-1">Opcode</font></b></p>
</td>
<td bgcolor="#e6e6e6" valign="top" width="248"><p align="center"><b><font face="Times New Roman" size="-1">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">ADDSUBPD <i>xmm1,xmm2/m128</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">66 0F D0 /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Add/Subtract packed double-precision floating-point number from XMM2/Mem to XMM1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">ADDSUBPS <i>xmm1,xmm2/m128</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">F2 0F D0 /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Add/Subtract packed single-precision floating-point number from XMM2/Mem to XMM1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">FISTTP <i>m16int</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">DF /1</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Store ST as a signed integer (truncate) in m16int and pop ST.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-156.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">FISTTP <i>m32int</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">DB /1</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Store ST as a signed integer (truncate) in m32int and pop ST.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-156.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">FISTTP <i>m64int</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">DD /1</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Store ST as a signed integer (truncate) in m16int and pop ST.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-156.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">HADDPD<i> xmm1,xmm2/m128</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">66 0F 7C /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Add horizontally packed double-precision floating-point numbers from XMM2/Mem to XMM1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">HADDPS<i> xmm1,xmm2/m128</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">F2 0F 7C /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Add horizontally packed single-precision floating-point numbers from XMM2/Mem to XMM1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">HSUBPD<i> xmm1,xmm2/m128</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">66 0F 7D /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Subtract horizontally packed double-precision floating-point numbers from XMM2/Mem to XMM1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">HSUBPS<i> xmm1,xmm2/m128</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">F2 0F 7D /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Subtract horizontally packed single-precision floating-point numbers from XMM2/Mem to XMM1.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">LDDQU<i> xmm,m128</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">F2 0F F0 /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Load 128 bits from Memory to XMM register.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">MONITOR <i>EAX,ECX,EDX</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">0F 01 C8</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Sets up a linear address range to be monitored by hardware and activates the monitor. The address range should be of a write-back memory caching type.</font></p>
</td>
<td valign="top" width="67"><p align="center"><font face="Times New Roman" size="-1"><sup><a href="#P9767_382841" name="P9767_382842"><img src="images/help-89.gif" border="0" width="16" height="15">10</a></sup></font></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">MOVDDUP <i>xmm1,xmm2/m64</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">F2 0F 12 /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Move 64 bits representing the lower double-precision data element from XMM2/Mem to XMM1 register and duplicate.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">MOVSHDUP<i> xmm1,xmm2/m128</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">F3 0F 16 /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Move 128 bits representing packed single-precision data elements from XMM2/Mem to XMM1 register and duplicate high.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">MOVSLDUP<i> xmm1,xmm2/m128</i></font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">F3 0F 12 /r</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">Move 128 bits representing packed single-precision data elements from XMM2/Mem to XMM1 register and duplicate low.</font></p>
</td>
<td valign="top" width="67"><p align="center"><img src="images/help-2.gif" border="0" width="16" height="15"></p>
</td></tr>
<tr>
<td valign="top" width="168"><p><font face="Courier" size="-1">MWAIT EAX,ECX</font></p>
</td>
<td valign="top" width="91"><p><font face="Courier" size="-1">0F 01 C9</font></p>
</td>
<td valign="top" width="248"><p><font face="Courier" size="-1">A hint that allows the processor to stop instruction execution and enter an implementation&#8211;dependent optimized state until occurrence of a class events.</font></p>
</td>
<td valign="top" width="67"><p align="center"><font face="Times New Roman" size="-1"><sup><a href="#P9784_383533" name="P9784_383534"><img src="images/help-89.gif" border="0" width="16" height="15">11</a></sup></font></p>
</td></tr></table></center></ul>

  <ul><p align="center"><font face="Times New Roman"><b><a name="P9786_383599"></a>Table 15-12: Prescott New Instruction Reference</b></font></p>

<p><a name="P9787_383646"></a><b><font face="Arial">1.6.8.1 MONITOR &#8211; Setup Monitor Address</font></b></p></ul>
<p><ul>
<table border="1">
<tr>
<td valign="top" width="87"><p><b><font face="Times New Roman">Opcode</font></b></p>
</td>
<td valign="top" width="99"><p><b><font face="Times New Roman">Instruction</font></b></p>
</td>
<td valign="top" width="386"><p><b><font face="Times New Roman">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="87"><p><font face="Courier">0F 01 C8</font></p>
</td>
<td valign="top" width="99"><p><font face="Courier">MONITOR</font></p>
</td>
<td valign="top" width="386"><p><font face="Times New Roman">Setup Monitor Address.</font></p>
</td></tr></table></ul>

  <ul><p><font face="Times New Roman">The simulator does not recognize this instruction. Therefore the simulator generates an invalid-opcode exception.</font></p>

<p><a name="P9798_383865"></a><font face="Arial"><b>1.6.8.2 MWAIT &#8211; Monitor Wait</b></font></p></ul>
<p><ul>
<table border="1">
<tr>
<td valign="top" width="87"><p><b><font face="Times New Roman">Opcode</font></b></p>
</td>
<td valign="top" width="98"><p><b><font face="Times New Roman">Instruction</font></b></p>
</td>
<td valign="top" width="385"><p><b><font face="Times New Roman">Description</font></b></p>
</td></tr>
<tr>
<td valign="top" width="87"><p><font face="Courier">0F 01 C9</font></p>
</td>
<td valign="top" width="98"><p><font face="Courier">MWAIT</font></p>
</td>
<td valign="top" width="385"><p><font face="Times New Roman">Monitor Wait.</font></p>
</td></tr></table></ul>

<ul><p><font face="Times New Roman">The simulator does not recognize this instruction. Therefore the simulator generates an invalid-opcode exception.</font></p></ul>

<p><font face="Times New Roman" size="-1"><sup><a name="P9217_370414" href="#P9217_370415">7</a> </sup></font><font face="Times New Roman"> In 64-bit mode, this opcode (0x63) is used for the MOVSXD instruction.</font></p>

<p><font face="Times New Roman" size="-1"><sup><a name="P9234_370656" href="#P9234_370657">8</a> </sup></font><font face="Times New Roman"> See Section <a href="#P9466_375609">A.6.3.1</a>, &#8220;<i><a href="#P9466_375609">INT &#8211; Interrupt to Vector</a></i>&#8221;, on page <a href="#P9466_375609">225</a>.</font></p>

<p><font face="Times New Roman" size="-1"><sup><a name="P9251_370992" href="#P9251_370993">9</a> </sup></font><font face="Times New Roman"> See Section <a href="#P9482_376112">A.6.3.2</a>, &#8220;<i><a href="#P9482_376112">IRET &#8211; Return from Interrupt</a></i>&#8221;, on page <a href="#P9482_376112">225</a>.</font></p>

<p><font face="Times New Roman" size="-1"><sup><a name="P9767_382841" href="#P9767_382842">10</a> </sup></font><font face="Times New Roman"> See Section <a href="#P9787_383646">A.6.8.1</a>, &#8220;<i><a href="#P9787_383646">MONITOR &#8211; Setup Monitor Address</a></i>&#8221;, on page <a href="#P9787_383646">228</a>.</font></p>

<p><font face="Times New Roman" size="-1"><sup><a name="P9784_383533" href="#P9784_383534">11</a> </sup></font><font face="Times New Roman"> See Section <a href="#P9798_383865">A.6.8.2</a>, &#8220;<i><a href="#P9798_383865">MWAIT &#8211; Monitor Wait</a></i>&#8221;, on page <a href="#P9798_383865">229</a>.</font></p><p align="left"><a href="help-57.htm#TopOfPage"><img src="images/back.png" alt="Previous Page" border="0"></a><a href="#TopOfPage"><img src="images/top.png" alt="Top Of Page" border="0"></a><a href="help-59.htm#TopOfPage"><img src="images/forward.png" alt="Next Page" border="0"></a></p><!-- TRANSIT - INFOAFTER -->
</body>
</html>
